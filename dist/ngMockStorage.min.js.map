{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","ngMockStorage.min.js","ngMockStorage.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_toConsumableArray","arr","Array","isArray","arr2","from","_typeof","obj","Symbol","constructor","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","iterator","next","done","push","value","err","Object","TypeError","window","angular","StorageProvider","$windowProvider","setStorageType","type","storageType","setKeyPrefix","prefix","storageKeyPrefix","setSerializer","serializer","setDeserializer","d","deserializer","getItem","key","$window","setItem","removeItem","clear","StorageService","$log","isStorageSupported","supported","Math","round","random","localStorage","service","warn","noop","provider","$get","toJson","fromJson","$inject","RouterProvider","$mockStorageProvider","$httpProvider","setNamespace","namespace","setLogLevel","keys","availablesLogLevels","indexOf","logLevel","addResource","config","resource","parentId","pos","lastIndexOf","substring","assign","primaryKey","collection","_getKey","parent","_getResource","newResource","name","data","path","_getPath","id","_getId","_getKeys","resources","loadDatas","find","charAt","toUpperCase","substr","toLowerCase","concat","RouterService","$q","$mockStorage","$injector","get","_createMethodWithoutData","p","rData","rIndex","_log","resolve","status","post","_createMethodWithData","toString","error","reject","put","remove","splice","patch","getResource","replace","_getRegex","test","_getParams","RegExp","params","m","match","val","_decodeParam","hasOwnProperty","decodeURIComponent","URIError","message","statusCode","_len","arguments","msg","_key","apply","_parseHeaders","headers","_fillInParsed","parsed","split","forEach","line","trim","headerKey","_headersGetter","headersObj","_transformData","fns","fn","JSON","parse","callback","url","_createMethod","resourceId","findIndex","item","String","transformRequest","defer","promise","_getResource2","_getResource3","defaults","transformResponse","then","reversedInterceptors","interceptor","response","responseError","interceptors","delete","interceptorFactory","unshift","invoke","info","debug","ModuleConfig","$provide","httpDecorator","$delegate","$mockRouter","wrapper","filter","k","decorator"],"mappings":"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","file":"ngMockStorage.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  StorageProvider.$inject = ['$windowProvider'];\n  RouterProvider.$inject = ['$mockStorageProvider', '$httpProvider'];\n  ModuleConfig.$inject = ['$provide', '$httpProvider'];\n\n  /**\n   * @ngdoc overview\n   * @name ngMockStorage\n   */\n\n  return angular.module('ngMockStorage', [])\n\n  /**\n   * @ngdoc object\n   * @name ngMockStorage.$mockStorage\n   * @requires $window\n   * @requires $log\n   */\n\n  .provider('$mockStorage', StorageProvider)\n\n  /**\n   * @ngdoc object\n   * @name ngMockStorage.$mockRouter\n   * @requires $log\n   * @requires $q\n   */\n\n  .provider('$mockRouter', RouterProvider).config(ModuleConfig);\n\n  function StorageProvider($windowProvider) {\n    var provider = void 0,\n        $window = $windowProvider.$get(),\n        storageKeyPrefix = 'ngMockStorage-',\n        storageType = 'localStorage',\n        serializer = angular.toJson,\n        deserializer = angular.fromJson;\n\n    StorageService.$inject = ['$window', '$log'];\n\n    provider = {\n      setStorageType: setStorageType,\n      setKeyPrefix: setKeyPrefix,\n      setSerializer: setSerializer,\n      setDeserializer: setDeserializer,\n      setItem: setItem,\n      clear: clear,\n      $get: StorageService\n    };\n\n    return provider;\n\n    function setStorageType(type) {\n      if (typeof type !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setStorageType() expects a String.');\n      }\n      storageType = type;\n    }\n\n    function setKeyPrefix(prefix) {\n      if (typeof prefix !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setKeyPrefix() expects a String.');\n      }\n      storageKeyPrefix = prefix;\n    }\n\n    function setSerializer(s) {\n      if (typeof s !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setSerializer expects a function.');\n      }\n      serializer = s;\n    }\n\n    function setDeserializer(d) {\n      if (typeof d !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setDeserializer expects a function.');\n      }\n      deserializer = d;\n    }\n\n    function getItem(key) {\n      return deserializer($window[storageType].getItem(storageKeyPrefix + key));\n    }\n\n    function setItem(key, value) {\n      return $window[storageType].setItem(storageKeyPrefix + key, serializer(value));\n    }\n\n    function removeItem(key) {\n      return $window[storageType].setItem(storageKeyPrefix + key);\n    }\n\n    function clear() {\n      return $window[storageType].clear();\n    }\n\n    function StorageService($window, $log) {\n      var service = void 0;\n\n      if (isStorageSupported(storageType)) {\n        service = {\n          getItem: getItem,\n          setItem: setItem,\n          removeItem: removeItem,\n          clear: clear\n        };\n      } else {\n        $log.warn('This browser does not support Web Storage!');\n        service = {\n          setItem: angular.noop,\n          getItem: angular.noop,\n          removeItem: angular.noop,\n          clear: angular.noop\n        };\n      }\n\n      return service;\n\n      function isStorageSupported() {\n\n        // Some installations of IE, for an unknown reason, throw \"SCRIPT5: Error: Access is denied\"\n        // when accessing window.localStorage. This happens before you try to do anything with it. Catch\n        // that error and allow execution to continue.\n\n        // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari\n        // when \"Block cookies\": \"Always block\" is turned on\n        var supported = void 0,\n            key = void 0;\n        try {\n          supported = $window[storageType];\n        } catch (err) {\n          supported = false;\n        }\n\n        // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n        // is available, but trying to call .setItem throws an exception below:\n        // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota.\"\n        if (supported && storageType === 'localStorage') {\n          key = '__' + Math.round(Math.random() * 1e7);\n\n          try {\n            localStorage.setItem(key, key);\n            localStorage.removeItem(key);\n          } catch (err) {\n            supported = false;\n          }\n        }\n\n        return supported;\n      }\n    }\n  }\n\n  function RouterProvider($mockStorageProvider, $httpProvider) {\n    var provider = void 0,\n        namespace = '',\n        logLevel = 0,\n        availablesLogLevels = { error: 0, warn: 1, info: 2, debug: 3 },\n        resources = [];\n\n    RouterService.$inject = ['$log', '$q', '$mockStorage', '$injector'];\n\n    provider = {\n      setNamespace: setNamespace,\n      setLogLevel: setLogLevel,\n      addResource: addResource,\n      loadDatas: loadDatas,\n      $get: RouterService\n    };\n\n    return provider;\n\n    function setNamespace(n) {\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setNamespace expects a string.');\n      }\n      namespace = n;\n    }\n\n    function setLogLevel(l) {\n      if (typeof l !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setLogLevel expects a string (error|warning|info).');\n      }\n      if (Object.keys(availablesLogLevels).indexOf(l) > -1) {\n        logLevel = availablesLogLevels[l];\n      }\n    }\n\n    function addResource(n, o) {\n      var config = void 0,\n          resource = void 0,\n          parentId = void 0;\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) !== 'object') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (n.indexOf('.') > -1) {\n        var pos = n.lastIndexOf('.');\n        parentId = n.substring(0, pos);\n        n = n.substring(pos + 1);\n      }\n\n      config = Object.assign({\n        primaryKey: 'id',\n        collection: true,\n        key: _getKey(n)\n      }, o || {});\n\n      config.parent = parentId;\n\n      resource = _getResource(n);\n\n      if (resource) {\n        throw new TypeError('[ngMockRouter] - Provider.addResource: Resource ' + n + ' already exist.');\n      } else {\n        var newResource = {\n          name: n\n        };\n\n        newResource.primaryKey = config.primaryKey;\n        newResource.key = config.key;\n        newResource.collection = config.collection;\n        newResource.data = config.collection ? [] : {};\n\n        if (config.parent) {\n          var parent = _getResource(config.parent);\n          if (parent) {\n            if (newResource.collection && parent.keys.indexOf(newResource.key) > -1) {\n              throw new TypeError('[ngMockRouter] - Provider.addResource: key ' + newResource.key + ' already exist. You can specify another one with the option key');\n            }\n            newResource.parent = config.parent;\n          }\n        }\n        newResource.path = _getPath(newResource);\n        newResource.id = _getId(newResource);\n        newResource.keys = _getKeys(newResource);\n\n        $mockStorageProvider.setItem(newResource.id, newResource.data);\n\n        resources.push(newResource);\n      }\n    }\n\n    function loadDatas(n, d) {\n      var r = _getResource(n);\n\n      if (r) {\n        if (r.collection && Array.isArray(d)) {\n          $mockStorageProvider.setItem(r.id, d);\n        } else if (!r.collection && !Array.isArray(d) && (typeof d === 'undefined' ? 'undefined' : _typeof(d)) === 'object') {\n          $mockStorageProvider.setItem(r.id, d);\n        } else {\n          throw new TypeError('[ngMockRouter] - Provider.loadDatas: Datas not valid.');\n        }\n      } else {\n        throw new TypeError('[ngMockRouter] - Provider.loadDatas: Resource ' + n + ' do not exist.');\n      }\n    }\n\n    function _getResource(n) {\n      return resources.find(function (r) {\n        return r.id === n;\n      });\n    }\n\n    function _getKey(n) {\n      return 'id' + n.charAt(0).toUpperCase() + n.substr(1).toLowerCase();\n    }\n\n    function _getPath(r) {\n      var path = '';\n      if (r.parent) {\n        path += _getResource(r.parent).path + '/';\n      }\n      path += r.name + (r.collection ? '/:' + r.key : '');\n\n      return path;\n    }\n\n    function _getId(r) {\n      var id = '';\n      if (r.parent) {\n        id += _getResource(r.parent).id + '.';\n      }\n      id += r.name;\n\n      return id;\n    }\n\n    function _getKeys(r) {\n      var keys = [];\n      if (r.parent && r.collection) {\n        keys = [].concat(_toConsumableArray(_getResource(r.parent).keys), [r.key]);\n      } else if (r.parent) {\n        keys = _getResource(r.parent).keys;\n      } else if (r.collection) {\n        keys = [r.key];\n      }\n      return keys;\n    }\n\n    function RouterService($log, $q, $mockStorage, $injector) {\n      var interceptors = $httpProvider.interceptors,\n          reversedInterceptors = [],\n          defaults = $httpProvider.defaults,\n          service = {\n        get: get(),\n        post: post(),\n        put: put(),\n        delete: remove(),\n        patch: patch(),\n        getResource: getResource,\n        interceptors: interceptors\n      };\n\n      interceptors.forEach(function (interceptorFactory) {\n        reversedInterceptors.unshift(typeof interceptorFactory === 'string' ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n      });\n\n      return service;\n\n      function get() {\n        return _createMethodWithoutData('get', function (d, r, p, rData, rIndex) {\n          if (typeof rIndex !== 'undefined' && rIndex !== null) {\n            rData = rData[rIndex];\n          }\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status: 200,\n            data: rData\n          });\n        });\n      }\n\n      function post() {\n        return _createMethodWithData('post', function (d, r, p, data, rData) {\n          var id = Math.random().toString(36).substring(2);\n          if (Array.isArray(rData)) {\n            data[r.primaryKey] = id;\n            rData.push(data);\n            $mockStorage.setItem(r.id, rData);\n            _log('info', 'Response : ', 200, data);\n            d.resolve({\n              status: 200,\n              data: data\n            });\n          } else {\n            _log('info', 'Response : ', 405, { error: 'Method Not Allowed' });\n            d.reject({\n              status: 405,\n              data: { error: 'Method Not Allowed' }\n            });\n          }\n        });\n      }\n\n      function put() {\n        return _createMethodWithData('put', function (d, r, p, data, rData, rIndex) {\n          rData[rIndex] = data;\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status: 200,\n            data: rData[rIndex]\n          });\n        });\n      }\n\n      function remove() {\n        return _createMethodWithoutData('delete', function (d, r, p, rData, rIndex) {\n          rData.splice(rIndex, 1);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status: 200,\n            data: rData\n          });\n        });\n      }\n\n      function patch() {\n        return _createMethodWithData('patch', function (d, r, p, data, rData, rIndex) {\n          Object.assign(rData[rIndex], data);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status: 200,\n            data: rData[rIndex]\n          });\n        });\n      }\n\n      function getResource(path) {\n        path = ('/' + path + '/').replace(/\\/\\//g, '/');\n        var r = resources.find(function (r) {\n          return _getRegex(r.path).test(path);\n        });\n        if (r) {\n          return [r, _getParams(path, r)];\n        } else {\n          return [null, null];\n        }\n      }\n\n      function _getRegex(path) {\n        path = '/' + namespace + '/' + path + '/';\n        return new RegExp('^' + path.replace(/\\/\\//g, '/').replace(/\\//g, '\\\\/').replace(/\\:[\\w]*/g, '(?:([^\\\\/]*))') + '?$');\n      }\n\n      function _getParams(path, r) {\n        var i = void 0,\n            params = {},\n            m = path.match(_getRegex(r.path));\n\n        for (i = 1; i < m.length; i++) {\n          var key = r.keys[i - 1],\n              val = _decodeParam(m[i]);\n\n          if (val !== undefined || !hasOwnProperty.call(params, key)) {\n            params[key] = val;\n          }\n        }\n        return params;\n      }\n\n      function _decodeParam(val) {\n        if (typeof val !== 'string' || val.length === 0) {\n          return val;\n        }\n\n        try {\n          return decodeURIComponent(val);\n        } catch (err) {\n          if (err instanceof URIError) {\n            err.message = 'Failed to decode param \\'' + val + '\\'';\n            err.status = err.statusCode = 400;\n          }\n          throw err;\n        }\n      }\n\n      function _log(l) {\n        if (Object.keys(availablesLogLevels).indexOf(l) > -1 && logLevel >= availablesLogLevels[l]) {\n          for (var _len = arguments.length, msg = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            msg[_key - 1] = arguments[_key];\n          }\n\n          $log[l].apply($log, msg);\n        }\n      }\n\n      function _parseHeaders(headers) {\n        var parsed = {},\n            i;\n\n        function _fillInParsed(key, val) {\n          if (key) {\n            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n          }\n        }\n\n        if (typeof headers === 'string') {\n          headers.split('\\n').forEach(function (line) {\n            i = line.indexOf(':');\n            _fillInParsed(line.substr(0, i).trim().toLowerCase(), line.substr(i + 1).trim());\n          });\n        } else if ((typeof headers === 'undefined' ? 'undefined' : _typeof(headers)) === 'object') {\n          Object.keys(headers).forEach(function (headerKey) {\n            _fillInParsed(headerKey.toLowerCase(), headers[headerKey].trim());\n          });\n        }\n\n        return parsed;\n      }\n\n      function _headersGetter(headers) {\n        var headersObj;\n\n        return function (name) {\n          if (!headersObj) {\n            headersObj = _parseHeaders(headers);\n          }\n\n          if (name) {\n            var value = headersObj[name.toLowerCase()];\n            if (value === void 0) {\n              value = null;\n            }\n            return value;\n          }\n\n          return headersObj;\n        };\n      }\n\n      function _transformData(data, headers, status, fns) {\n        if (typeof fns === 'function') {\n          return fns(data, headers, status);\n        } else if (fns) {\n          var i = void 0;\n          for (i = 0; i < fns.length; i++) {\n            var fn = fns[i];\n            data = fn(data, headers, status);\n          }\n        }\n        if (typeof data === 'string') {\n          data = JSON.parse(data);\n        }\n        return data;\n      }\n\n      function _createMethodWithoutData(name, callback) {\n        return function (url, config) {\n          return _createMethod(name, url, null, config, function (d, r, p, config) {\n            var resourceId = p[r.key],\n                rData = $mockStorage.getItem(r.id);\n\n            if (resourceId) {\n              var rIndex = rData.findIndex(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (rIndex > -1) {\n                callback(d, r, p, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else if (name === 'get') {\n              callback(d, r, p, rData);\n            } else {\n              _log('info', 'Response : ', 404, { error: 'No Id Given' });\n              d.reject({\n                status: 404,\n                data: { error: 'No Id Given' }\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethodWithData(name, callback) {\n        return function (url, data, config) {\n          return _createMethod(name, url, data, config, function (d, r, p, config) {\n            var resourceId = p[r.key],\n                rData = $mockStorage.getItem(r.id);\n\n            data = _transformData(data, _headersGetter(config.headers), undefined, config.transformRequest);\n\n            if (resourceId) {\n              var rIndex = rData.findIndex(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (rIndex > -1) {\n                callback(d, r, p, data, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else if (name === 'post') {\n              callback(d, r, p, data, rData);\n            } else {\n              _log('info', 'Response : ', 404, { error: 'No Id Given' });\n              d.reject({\n                status: 404,\n                data: { error: 'No Id Given' }\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethod(name, url, data, config, callback) {\n        _log('info', name.toUpperCase() + ' : ', url);\n        if (data) {\n          _log('info', 'Data : ', data);\n        }\n        if (config) {\n          _log('info', 'Config : ', config);\n        }\n        var d = $q.defer();\n        var promise = d.promise;\n\n        var _getResource2 = getResource(url);\n\n        var _getResource3 = _slicedToArray(_getResource2, 2);\n\n        var r = _getResource3[0];\n        var p = _getResource3[1];\n\n        config = Object.assign({\n          transformRequest: defaults.transformRequest,\n          transformResponse: defaults.transformResponse\n        }, config);\n\n        if (r) {\n          callback(d, r, p, config);\n        } else {\n          _log('info', 'Response : ', 404, { error: 'Not a valid path!' });\n          d.reject({\n            status: 404,\n            data: { error: 'Not a valid path!' }\n          });\n        }\n\n        promise = promise.then(config.transformResponse, config.transformResponse);\n\n        reversedInterceptors.forEach(function (interceptor) {\n          if (interceptor.response || interceptor.responseError) {\n            promise = promise.then(interceptor.response, interceptor.responseError);\n          }\n        });\n\n        return promise;\n      }\n    }\n  }\n\n  function ModuleConfig($provide, $httpProvider) {\n    httpDecorator.$inject = ['$delegate', '$mockRouter'];\n    $provide.decorator('$http', httpDecorator);\n\n    function httpDecorator($delegate, $mockRouter) {\n      var wrapper = function wrapper() {\n        return $delegate.apply($delegate, arguments);\n      };\n\n      $mockRouter.interceptors = $httpProvider.interceptors;\n      $mockRouter.defaults = $httpProvider.defaults;\n\n      Object.keys($delegate).filter(function (k) {\n        return typeof $delegate[k] !== 'function';\n      }).forEach(function (k) {\n        wrapper[k] = $delegate[k];\n      });\n\n      Object.keys($delegate).filter(function (k) {\n        return typeof $delegate[k] === 'function';\n      }).forEach(function (k) {\n        wrapper[k] = function () {\n          if (typeof $mockRouter[k] === 'function') {\n            return $mockRouter[k].apply($mockRouter, arguments);\n          } else {\n            return $delegate[k].apply($delegate, arguments);\n          }\n        };\n      });\n\n      return wrapper;\n    }\n  }\n})(window, window.angular);\n\n},{}]},{},[1])\n\n","(function(window, angular, undefined) {\n  'use strict';\n\n  StorageProvider.$inject = ['$windowProvider'];\n  RouterProvider.$inject  = ['$mockStorageProvider', '$httpProvider'];\n  ModuleConfig.$inject    = ['$provide', '$httpProvider'];\n\n  /**\n   * @ngdoc overview\n   * @name ngMockStorage\n   */\n\n  return angular.module('ngMockStorage', [])\n\n    /**\n     * @ngdoc object\n     * @name ngMockStorage.$mockStorage\n     * @requires $window\n     * @requires $log\n     */\n\n    .provider('$mockStorage', StorageProvider)\n\n    /**\n     * @ngdoc object\n     * @name ngMockStorage.$mockRouter\n     * @requires $log\n     * @requires $q\n     */\n\n    .provider('$mockRouter', RouterProvider)\n\n    .config(ModuleConfig);\n\n\n  function StorageProvider($windowProvider) {\n    let provider,\n        $window          = $windowProvider.$get(),\n        storageKeyPrefix = 'ngMockStorage-',\n        storageType      = 'localStorage',\n        serializer       = angular.toJson,\n        deserializer     = angular.fromJson;\n\n    StorageService.$inject = ['$window', '$log'];\n\n    provider = {\n      setStorageType  : setStorageType,\n      setKeyPrefix    : setKeyPrefix,\n      setSerializer   : setSerializer,\n      setDeserializer : setDeserializer,\n      setItem         : setItem,\n      clear           : clear,\n      $get            : StorageService\n    };\n\n    return provider;\n\n    function setStorageType(type) {\n      if (typeof type !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setStorageType() expects a String.');\n      }\n      storageType = type;\n    }\n\n    function setKeyPrefix(prefix) {\n      if (typeof prefix !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setKeyPrefix() expects a String.');\n      }\n      storageKeyPrefix = prefix;\n    }\n\n    function setSerializer(s) {\n      if (typeof s !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setSerializer expects a function.');\n      }\n      serializer = s;\n    }\n\n    function setDeserializer(d) {\n      if (typeof d !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setDeserializer expects a function.');\n      }\n      deserializer = d;\n    }\n\n    function getItem(key) {\n      return deserializer($window[storageType].getItem(storageKeyPrefix + key));\n    }\n\n    function setItem(key, value) {\n      return $window[storageType].setItem(storageKeyPrefix + key, serializer(value));\n    }\n\n    function removeItem(key) {\n      return $window[storageType].setItem(storageKeyPrefix + key);\n    }\n\n    function clear() {\n      return $window[storageType].clear();\n    }\n\n    function StorageService($window, $log) {\n      let service;\n\n      if (isStorageSupported(storageType)) {\n        service = {\n          getItem    : getItem,\n          setItem    : setItem,\n          removeItem : removeItem,\n          clear      : clear\n        };\n      } else {\n        $log.warn('This browser does not support Web Storage!');\n        service = {\n          setItem    : angular.noop,\n          getItem    : angular.noop,\n          removeItem : angular.noop,\n          clear      : angular.noop\n        };\n      }\n\n      return service;\n\n      function isStorageSupported() {\n\n        // Some installations of IE, for an unknown reason, throw \"SCRIPT5: Error: Access is denied\"\n        // when accessing window.localStorage. This happens before you try to do anything with it. Catch\n        // that error and allow execution to continue.\n\n        // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari\n        // when \"Block cookies\": \"Always block\" is turned on\n        let supported, key;\n        try {\n          supported = $window[storageType];\n        }\n        catch (err) {\n          supported = false;\n        }\n\n        // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n        // is available, but trying to call .setItem throws an exception below:\n        // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota.\"\n        if (supported && storageType === 'localStorage') {\n          key = '__' + Math.round(Math.random() * 1e7);\n\n          try {\n            localStorage.setItem(key, key);\n            localStorage.removeItem(key);\n          }\n          catch (err) {\n            supported = false;\n          }\n        }\n\n        return supported;\n      }\n    }\n  }\n\n  function RouterProvider($mockStorageProvider, $httpProvider) {\n    let provider,\n        namespace           = '',\n        logLevel            = 0,\n        availablesLogLevels = {error : 0, warn : 1, info : 2, debug : 3},\n        resources           = [];\n\n    RouterService.$inject = ['$log', '$q', '$mockStorage', '$injector'];\n\n    provider = {\n      setNamespace : setNamespace,\n      setLogLevel  : setLogLevel,\n      addResource  : addResource,\n      loadDatas    : loadDatas,\n      $get         : RouterService\n    };\n\n    return provider;\n\n    function setNamespace(n) {\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setNamespace expects a string.');\n      }\n      namespace = n;\n    }\n\n    function setLogLevel(l) {\n      if (typeof l !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setLogLevel expects a string (error|warning|info).');\n      }\n      if (Object.keys(availablesLogLevels).indexOf(l) > -1) {\n        logLevel = availablesLogLevels[l];\n      }\n    }\n\n    function addResource(n, o) {\n      let config, resource, parentId;\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (o && typeof o !== 'object') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (n.indexOf('.') > -1) {\n        let pos  = n.lastIndexOf('.');\n        parentId = n.substring(0, pos);\n        n        = n.substring(pos + 1);\n      }\n\n      config = Object.assign({\n        primaryKey : 'id',\n        collection : true,\n        key        : _getKey(n)\n      }, o || {});\n\n      config.parent = parentId;\n\n      resource = _getResource(n);\n\n      if (resource) {\n        throw new TypeError('[ngMockRouter] - Provider.addResource: Resource ' + n + ' already exist.');\n      } else {\n        let newResource = {\n          name : n\n        };\n\n        newResource.primaryKey = config.primaryKey;\n        newResource.key        = config.key;\n        newResource.collection = config.collection;\n        newResource.data       = config.collection ? [] : {};\n\n        if (config.parent) {\n          let parent = _getResource(config.parent);\n          if (parent) {\n            if (newResource.collection && parent.keys.indexOf(newResource.key) > -1) {\n              throw new TypeError('[ngMockRouter] - Provider.addResource: key ' + newResource.key + ' already exist. You can specify another one with the option key');\n            }\n            newResource.parent = config.parent;\n          }\n        }\n        newResource.path = _getPath(newResource);\n        newResource.id   = _getId(newResource);\n        newResource.keys = _getKeys(newResource);\n\n        $mockStorageProvider.setItem(newResource.id, newResource.data);\n\n        resources.push(newResource);\n      }\n    }\n\n    function loadDatas(n, d) {\n      let r = _getResource(n);\n\n      if (r) {\n        if (r.collection && Array.isArray(d)) {\n          $mockStorageProvider.setItem(r.id, d);\n        } else if (!r.collection && !Array.isArray(d) && typeof d === 'object') {\n          $mockStorageProvider.setItem(r.id, d);\n        } else {\n          throw new TypeError('[ngMockRouter] - Provider.loadDatas: Datas not valid.');\n        }\n      } else {\n        throw new TypeError('[ngMockRouter] - Provider.loadDatas: Resource ' + n + ' do not exist.');\n      }\n    }\n\n    function _getResource(n) {\n      return resources.find((r)=> {\n        return r.id === n;\n      });\n    }\n\n    function _getKey(n) {\n      return 'id' + n.charAt(0).toUpperCase() + n.substr(1).toLowerCase();\n    }\n\n    function _getPath(r) {\n      let path = '';\n      if (r.parent) {\n        path += _getResource(r.parent).path + '/';\n      }\n      path += r.name + (r.collection ? '/:' + r.key : '');\n\n      return path;\n    }\n\n    function _getId(r) {\n      let id = '';\n      if (r.parent) {\n        id += _getResource(r.parent).id + '.';\n      }\n      id += r.name;\n\n      return id;\n    }\n\n    function _getKeys(r) {\n      let keys = [];\n      if (r.parent && r.collection) {\n        keys = [..._getResource(r.parent).keys, r.key];\n      } else if (r.parent) {\n        keys = _getResource(r.parent).keys;\n      } else if (r.collection) {\n        keys = [r.key];\n      }\n      return keys;\n    }\n\n    function RouterService($log, $q, $mockStorage, $injector) {\n      let interceptors         = $httpProvider.interceptors,\n          reversedInterceptors = [],\n          defaults             = $httpProvider.defaults,\n          service              = {\n            get          : get(),\n            post         : post(),\n            put          : put(),\n            delete       : remove(),\n            patch        : patch(),\n            getResource  : getResource,\n            interceptors : interceptors\n          };\n\n\n      interceptors.forEach(function(interceptorFactory) {\n        reversedInterceptors.unshift((typeof interceptorFactory === 'string') ?\n          $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n      });\n\n      return service;\n\n      function get() {\n        return _createMethodWithoutData('get', function(d, r, p, rData, rIndex) {\n          if (typeof rIndex !== 'undefined' && rIndex !== null) {\n            rData = rData[rIndex];\n          }\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status : 200,\n            data   : rData\n          });\n        });\n      }\n\n      function post() {\n        return _createMethodWithData('post', function(d, r, p, data, rData) {\n          let id = Math.random().toString(36).substring(2);\n          if (Array.isArray(rData)) {\n            data[r.primaryKey] = id;\n            rData.push(data);\n            $mockStorage.setItem(r.id, rData);\n            _log('info', 'Response : ', 200, data);\n            d.resolve({\n              status : 200,\n              data   : data\n            });\n          } else {\n            _log('info', 'Response : ', 405, {error : 'Method Not Allowed'});\n            d.reject({\n              status : 405,\n              data   : {error : 'Method Not Allowed'}\n            });\n          }\n        });\n      }\n\n      function put() {\n        return _createMethodWithData('put', function(d, r, p, data, rData, rIndex) {\n          rData[rIndex] = data;\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status : 200,\n            data   : rData[rIndex]\n          });\n        });\n      }\n\n      function remove() {\n        return _createMethodWithoutData('delete', function(d, r, p, rData, rIndex) {\n          rData.splice(rIndex, 1);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status : 200,\n            data   : rData\n          });\n        });\n      }\n\n      function patch() {\n        return _createMethodWithData('patch', function(d, r, p, data, rData, rIndex) {\n          Object.assign(rData[rIndex], data);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status : 200,\n            data   : rData[rIndex]\n          });\n        });\n      }\n\n      function getResource(path) {\n        path  = ('/' + path + '/').replace(/\\/\\//g, '/');\n        let r = resources.find((r) => {\n          return _getRegex(r.path).test(path);\n        });\n        if (r) {\n          return [r, _getParams(path, r)];\n        } else {\n          return [null, null];\n        }\n      }\n\n      function _getRegex(path) {\n        path = '/' + namespace + '/' + path + '/';\n        return new RegExp('^' +\n          path.replace(/\\/\\//g, '/')\n            .replace(/\\//g, '\\\\/')\n            .replace(/\\:[\\w]*/g, '(?:([^\\\\/]*))') +\n          '?$');\n      }\n\n      function _getParams(path, r) {\n        let i,\n            params = {},\n            m      = path.match(_getRegex(r.path));\n\n        for (i = 1; i < m.length; i++) {\n          let key = r.keys[i - 1],\n              val = _decodeParam(m[i]);\n\n          if (val !== undefined || !(hasOwnProperty.call(params, key))) {\n            params[key] = val;\n          }\n        }\n        return params;\n      }\n\n      function _decodeParam(val) {\n        if (typeof val !== 'string' || val.length === 0) {\n          return val;\n        }\n\n        try {\n          return decodeURIComponent(val);\n        } catch (err) {\n          if (err instanceof URIError) {\n            err.message = 'Failed to decode param \\'' + val + '\\'';\n            err.status  = err.statusCode = 400;\n          }\n          throw err;\n        }\n      }\n\n      function _log(l, ...msg) {\n        if (Object.keys(availablesLogLevels).indexOf(l) > -1 && logLevel >= availablesLogLevels[l]) {\n          $log[l](...msg);\n        }\n      }\n\n      function _parseHeaders(headers) {\n        var parsed = {},\n            i;\n\n        function _fillInParsed(key, val) {\n          if (key) {\n            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n          }\n        }\n\n        if (typeof headers === 'string') {\n          headers.split('\\n').forEach(function(line) {\n            i = line.indexOf(':');\n            _fillInParsed(line.substr(0, i).trim().toLowerCase(), line.substr(i + 1).trim());\n          });\n        } else if (typeof headers === 'object') {\n          Object.keys(headers).forEach(function(headerKey) {\n            _fillInParsed(headerKey.toLowerCase(), headers[headerKey].trim());\n          });\n        }\n\n        return parsed;\n      }\n\n      function _headersGetter(headers) {\n        var headersObj;\n\n        return function(name) {\n          if (!headersObj) {\n            headersObj = _parseHeaders(headers);\n          }\n\n          if (name) {\n            var value = headersObj[name.toLowerCase()];\n            if (value === void 0) {\n              value = null;\n            }\n            return value;\n          }\n\n          return headersObj;\n        };\n      }\n\n      function _transformData(data, headers, status, fns) {\n        if (typeof fns === 'function') {\n          return fns(data, headers, status);\n        } else if (fns) {\n          let i;\n          for (i = 0; i < fns.length; i++) {\n            let fn = fns[i];\n            data   = fn(data, headers, status);\n          }\n        }\n        if (typeof data === 'string') {\n          data = JSON.parse(data);\n        }\n        return data;\n      }\n\n      function _createMethodWithoutData(name, callback) {\n        return function(url, config) {\n          return _createMethod(name, url, null, config, function(d, r, p, config) {\n            let resourceId = p[r.key],\n                rData      = $mockStorage.getItem(r.id);\n\n            if (resourceId) {\n              let rIndex = rData.findIndex((item) => String(item[r.primaryKey]) === String(resourceId));\n              if (rIndex > -1) {\n                callback(d, r, p, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, {error : 'Not Found'});\n                d.reject({\n                  status : 404,\n                  data   : {error : 'Not Found'}\n                });\n              }\n            } else if (name === 'get') {\n              callback(d, r, p, rData);\n            } else {\n              _log('info', 'Response : ', 404, {error : 'No Id Given'});\n              d.reject({\n                status : 404,\n                data   : {error : 'No Id Given'}\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethodWithData(name, callback) {\n        return function(url, data, config) {\n          return _createMethod(name, url, data, config, function(d, r, p, config) {\n            let resourceId = p[r.key],\n                rData      = $mockStorage.getItem(r.id);\n\n            data = _transformData(data, _headersGetter(config.headers), undefined, config.transformRequest);\n\n            if (resourceId) {\n              let rIndex = rData.findIndex((item) => String(item[r.primaryKey]) === String(resourceId));\n              if (rIndex > -1) {\n                callback(d, r, p, data, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, {error : 'Not Found'});\n                d.reject({\n                  status : 404,\n                  data   : {error : 'Not Found'}\n                });\n              }\n            } else if (name === 'post') {\n              callback(d, r, p, data, rData);\n            } else {\n              _log('info', 'Response : ', 404, {error : 'No Id Given'});\n              d.reject({\n                status : 404,\n                data   : {error : 'No Id Given'}\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethod(name, url, data, config, callback) {\n        _log('info', name.toUpperCase() + ' : ', url);\n        if (data) {\n          _log('info', 'Data : ', data);\n        }\n        if (config) {\n          _log('info', 'Config : ', config);\n        }\n        let d       = $q.defer(),\n            promise = d.promise,\n            [r, p] = getResource(url);\n\n        config = Object.assign({\n          transformRequest  : defaults.transformRequest,\n          transformResponse : defaults.transformResponse\n        }, config);\n\n        if (r) {\n          callback(d, r, p, config);\n        } else {\n          _log('info', 'Response : ', 404, {error : 'Not a valid path!'});\n          d.reject({\n            status : 404,\n            data   : {error : 'Not a valid path!'}\n          });\n        }\n\n        promise = promise.then(config.transformResponse, config.transformResponse);\n\n        reversedInterceptors.forEach(function(interceptor) {\n          if (interceptor.response || interceptor.responseError) {\n            promise = promise.then(interceptor.response, interceptor.responseError);\n          }\n        });\n\n        return promise;\n      }\n    }\n  }\n\n  function ModuleConfig($provide, $httpProvider) {\n    httpDecorator.$inject = ['$delegate', '$mockRouter'];\n    $provide.decorator('$http', httpDecorator);\n\n    function httpDecorator($delegate, $mockRouter) {\n      let wrapper = function() {\n        return $delegate.apply($delegate, arguments);\n      };\n\n      $mockRouter.interceptors = $httpProvider.interceptors;\n      $mockRouter.defaults     = $httpProvider.defaults;\n\n      Object.keys($delegate).filter((k)=> typeof $delegate[k] !== 'function')\n        .forEach((k)=> {\n          wrapper[k] = $delegate[k];\n        });\n\n      Object.keys($delegate).filter((k)=> typeof $delegate[k] === 'function')\n        .forEach((k)=> {\n          wrapper[k] = function() {\n            if (typeof $mockRouter[k] === 'function') {\n              return $mockRouter[k].apply($mockRouter, arguments);\n            } else {\n              return $delegate[k].apply($delegate, arguments);\n            }\n          };\n        });\n\n      return wrapper;\n    }\n  }\n})(window, window.angular);\n"],"sourceRoot":"/source/"}