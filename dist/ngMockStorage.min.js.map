{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","ngMockStorage.min.js","ngMockStorage.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_toConsumableArray","arr","Array","isArray","arr2","from","_typeof","obj","Symbol","constructor","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","iterator","next","done","push","value","err","Object","TypeError","_extends","assign","target","arguments","source","key","prototype","hasOwnProperty","window","angular","StorageProvider","$windowProvider","setStorageType","type","storageType","setKeyPrefix","prefix","storageKeyPrefix","setSerializer","serializer","setDeserializer","d","deserializer","getItem","$window","setItem","removeItem","clear","StorageService","$log","isStorageSupported","supported","Math","round","random","localStorage","service","warn","noop","provider","$get","toJson","fromJson","$inject","RouterProvider","$mockStorageProvider","$httpProvider","setNamespace","namespace","setLogLevel","keys","availablesLogLevels","indexOf","logLevel","addResource","config","resource","parentId","pos","lastIndexOf","substring","primaryKey","collection","_getKey","parent","_getResource","newResource","name","data","path","_getPath","id","_getId","_getKeys","resources","loadDatas","find","charAt","toUpperCase","substr","toLowerCase","concat","RouterService","$q","$mockStorage","$injector","get","_createMethodWithoutData","p","rData","rIndex","_log","resolve","status","post","_createMethodWithData","toString","error","reject","put","remove","splice","patch","getResource","replace","_getRegex","test","_getParams","RegExp","params","m","match","val","_decodeParam","decodeURIComponent","URIError","message","statusCode","_len","msg","_key","apply","_parseHeaders","headers","_fillInParsed","parsed","split","forEach","line","trim","headerKey","_headersGetter","headersObj","_transformData","fns","fn","JSON","parse","callback","url","_createMethod","resourceId","findIndex","item","String","transformRequest","defer","promise","_getResource2","_getResource3","defaults","transformResponse","then","reversedInterceptors","interceptor","response","responseError","interceptors","delete","interceptorFactory","unshift","invoke","info","debug","ModuleConfig","$provide","httpDecorator","$delegate","$mockRouter","wrapper","filter","k","decorator"],"mappings":"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","file":"ngMockStorage.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  StorageProvider.$inject = ['$windowProvider'];\n  RouterProvider.$inject = ['$mockStorageProvider', '$httpProvider'];\n  ModuleConfig.$inject = ['$provide'];\n\n  /**\n   * @ngdoc overview\n   * @name ngMockStorage\n   */\n\n  return angular.module('ngMockStorage', [])\n\n  /**\n   * @ngdoc object\n   * @name ngMockStorage.$mockStorage\n   * @requires $window\n   * @requires $log\n   */\n\n  .provider('$mockStorage', StorageProvider)\n\n  /**\n   * @ngdoc object\n   * @name ngMockStorage.$mockRouter\n   * @requires $log\n   * @requires $q\n   */\n\n  .provider('$mockRouter', RouterProvider).config(ModuleConfig);\n\n  function StorageProvider($windowProvider) {\n    var provider = void 0,\n        $window = $windowProvider.$get(),\n        storageKeyPrefix = 'ngMockStorage-',\n        storageType = 'localStorage',\n        serializer = angular.toJson,\n        deserializer = angular.fromJson;\n\n    StorageService.$inject = ['$window', '$log'];\n\n    provider = {\n      setStorageType: setStorageType,\n      setKeyPrefix: setKeyPrefix,\n      setSerializer: setSerializer,\n      setDeserializer: setDeserializer,\n      setItem: setItem,\n      clear: clear,\n      $get: StorageService\n    };\n\n    return provider;\n\n    function setStorageType(type) {\n      if (typeof type !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setStorageType() expects a String.');\n      }\n      storageType = type;\n    }\n\n    function setKeyPrefix(prefix) {\n      if (typeof prefix !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setKeyPrefix() expects a String.');\n      }\n      storageKeyPrefix = prefix;\n    }\n\n    function setSerializer(s) {\n      if (typeof s !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setSerializer expects a function.');\n      }\n      serializer = s;\n    }\n\n    function setDeserializer(d) {\n      if (typeof d !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setDeserializer expects a function.');\n      }\n      deserializer = d;\n    }\n\n    function getItem(key) {\n      return deserializer($window[storageType].getItem(storageKeyPrefix + key));\n    }\n\n    function setItem(key, value) {\n      return $window[storageType].setItem(storageKeyPrefix + key, serializer(value));\n    }\n\n    function removeItem(key) {\n      return $window[storageType].setItem(storageKeyPrefix + key);\n    }\n\n    function clear() {\n      return $window[storageType].clear();\n    }\n\n    function StorageService($window, $log) {\n      var service = void 0;\n\n      if (isStorageSupported(storageType)) {\n        service = {\n          getItem: getItem,\n          setItem: setItem,\n          removeItem: removeItem,\n          clear: clear\n        };\n      } else {\n        $log.warn('This browser does not support Web Storage!');\n        service = {\n          setItem: angular.noop,\n          getItem: angular.noop,\n          removeItem: angular.noop,\n          clear: angular.noop\n        };\n      }\n\n      return service;\n\n      function isStorageSupported() {\n\n        // Some installations of IE, for an unknown reason, throw \"SCRIPT5: Error: Access is denied\"\n        // when accessing window.localStorage. This happens before you try to do anything with it. Catch\n        // that error and allow execution to continue.\n\n        // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari\n        // when \"Block cookies\": \"Always block\" is turned on\n        var supported = void 0,\n            key = void 0;\n        try {\n          supported = $window[storageType];\n        } catch (err) {\n          supported = false;\n        }\n\n        // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n        // is available, but trying to call .setItem throws an exception below:\n        // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota.\"\n        if (supported && storageType === 'localStorage') {\n          key = '__' + Math.round(Math.random() * 1e7);\n\n          try {\n            localStorage.setItem(key, key);\n            localStorage.removeItem(key);\n          } catch (err) {\n            supported = false;\n          }\n        }\n\n        return supported;\n      }\n    }\n  }\n\n  function RouterProvider($mockStorageProvider, $httpProvider) {\n    var provider = void 0,\n        namespace = '',\n        logLevel = 0,\n        availablesLogLevels = { error: 0, warn: 1, info: 2, debug: 3 },\n        resources = [];\n\n    RouterService.$inject = ['$log', '$q', '$mockStorage', '$injector'];\n\n    provider = {\n      setNamespace: setNamespace,\n      setLogLevel: setLogLevel,\n      addResource: addResource,\n      loadDatas: loadDatas,\n      $get: RouterService\n    };\n\n    return provider;\n\n    function setNamespace(n) {\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setNamespace expects a string.');\n      }\n      namespace = n;\n    }\n\n    function setLogLevel(l) {\n      if (typeof l !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setLogLevel expects a string (error|warning|info).');\n      }\n      if (Object.keys(availablesLogLevels).indexOf(l) > -1) {\n        logLevel = availablesLogLevels[l];\n      }\n    }\n\n    function addResource(n, o) {\n      var config = void 0,\n          resource = void 0,\n          parentId = void 0;\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) !== 'object') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (n.indexOf('.') > -1) {\n        var pos = n.lastIndexOf('.');\n        parentId = n.substring(0, pos);\n        n = n.substring(pos + 1);\n      }\n\n      config = _extends({\n        primaryKey: 'id',\n        collection: true,\n        key: _getKey(n)\n      }, o || {});\n\n      config.parent = parentId;\n\n      resource = _getResource(n);\n\n      if (resource) {\n        throw new TypeError('[ngMockRouter] - Provider.addResource: Resource ' + n + ' already exist.');\n      } else {\n        var newResource = {\n          name: n\n        };\n\n        newResource.primaryKey = config.primaryKey;\n        newResource.key = config.key;\n        newResource.collection = config.collection;\n        newResource.data = config.collection ? [] : {};\n\n        if (config.parent) {\n          var parent = _getResource(config.parent);\n          if (parent) {\n            if (newResource.collection && parent.keys.indexOf(newResource.key) > -1) {\n              throw new TypeError('[ngMockRouter] - Provider.addResource: key ' + newResource.key + ' already exist. You can specify another one with the option key');\n            }\n            newResource.parent = config.parent;\n          }\n        }\n        newResource.path = _getPath(newResource);\n        newResource.id = _getId(newResource);\n        newResource.keys = _getKeys(newResource);\n\n        $mockStorageProvider.setItem(newResource.id, newResource.data);\n\n        resources.push(newResource);\n      }\n    }\n\n    function loadDatas(n, d) {\n      var r = _getResource(n);\n\n      if (r) {\n        if (r.collection && Array.isArray(d)) {\n          $mockStorageProvider.setItem(r.id, d);\n        } else if (!r.collection && !Array.isArray(d) && (typeof d === 'undefined' ? 'undefined' : _typeof(d)) === 'object') {\n          $mockStorageProvider.setItem(r.id, d);\n        } else {\n          throw new TypeError('[ngMockRouter] - Provider.loadDatas: Datas not valid.');\n        }\n      } else {\n        throw new TypeError('[ngMockRouter] - Provider.loadDatas: Resource ' + n + ' do not exist.');\n      }\n    }\n\n    function _getResource(n) {\n      return resources.find(function (r) {\n        return r.id === n;\n      });\n    }\n\n    function _getKey(n) {\n      return 'id' + n.charAt(0).toUpperCase() + n.substr(1).toLowerCase();\n    }\n\n    function _getPath(r) {\n      var path = '';\n      if (r.parent) {\n        path += _getResource(r.parent).path + '/';\n      }\n      path += r.name + (r.collection ? '/:' + r.key : '');\n\n      return path;\n    }\n\n    function _getId(r) {\n      var id = '';\n      if (r.parent) {\n        id += _getResource(r.parent).id + '.';\n      }\n      id += r.name;\n\n      return id;\n    }\n\n    function _getKeys(r) {\n      var keys = [];\n      if (r.parent && r.collection) {\n        keys = [].concat(_toConsumableArray(_getResource(r.parent).keys), [r.key]);\n      } else if (r.parent) {\n        keys = _getResource(r.parent).keys;\n      } else if (r.collection) {\n        keys = [r.key];\n      }\n      return keys;\n    }\n\n    function RouterService($log, $q, $mockStorage, $injector) {\n      var interceptors = $httpProvider.interceptors,\n          reversedInterceptors = [],\n          defaults = $httpProvider.defaults,\n          service = {\n        get: get(),\n        post: post(),\n        put: put(),\n        delete: remove(),\n        patch: patch(),\n        getResource: getResource,\n        interceptors: interceptors\n      };\n\n      interceptors.forEach(function (interceptorFactory) {\n        reversedInterceptors.unshift(typeof interceptorFactory === 'string' ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n      });\n\n      return service;\n\n      function get() {\n        return _createMethodWithoutData('get', function (d, r, p, rData, rIndex) {\n          if (typeof rIndex !== 'undefined' && rIndex !== null) {\n            rData = rData[rIndex];\n          }\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status: 200,\n            data: rData\n          });\n        });\n      }\n\n      function post() {\n        return _createMethodWithData('post', function (d, r, p, data, rData) {\n          var id = Math.random().toString(36).substring(2);\n          if (Array.isArray(rData)) {\n            data[r.primaryKey] = id;\n            rData.push(data);\n            $mockStorage.setItem(r.id, rData);\n            _log('info', 'Response : ', 200, data);\n            d.resolve({\n              status: 200,\n              data: data\n            });\n          } else {\n            _log('info', 'Response : ', 405, { error: 'Method Not Allowed' });\n            d.reject({\n              status: 405,\n              data: { error: 'Method Not Allowed' }\n            });\n          }\n        });\n      }\n\n      function put() {\n        return _createMethodWithData('put', function (d, r, p, data, rData, rIndex) {\n          rData[rIndex] = data;\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status: 200,\n            data: rData[rIndex]\n          });\n        });\n      }\n\n      function remove() {\n        return _createMethodWithoutData('delete', function (d, r, p, rData, rIndex) {\n          rData.splice(rIndex, 1);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status: 200,\n            data: rData\n          });\n        });\n      }\n\n      function patch() {\n        return _createMethodWithData('patch', function (d, r, p, data, rData, rIndex) {\n          _extends(rData[rIndex], data);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status: 200,\n            data: rData[rIndex]\n          });\n        });\n      }\n\n      function getResource(path) {\n        path = ('/' + path + '/').replace(/\\/\\//g, '/');\n        var r = resources.find(function (r) {\n          return _getRegex(r.path).test(path);\n        });\n        if (r) {\n          return [r, _getParams(path, r)];\n        } else {\n          return [null, null];\n        }\n      }\n\n      function _getRegex(path) {\n        path = '/' + namespace + '/' + path + '/';\n        return new RegExp('^' + path.replace(/\\/\\//g, '/').replace(/\\//g, '\\\\/').replace(/\\:[\\w]*/g, '(?:([^\\\\/]*))') + '?$');\n      }\n\n      function _getParams(path, r) {\n        var i = void 0,\n            params = {},\n            m = path.match(_getRegex(r.path));\n\n        for (i = 1; i < m.length; i++) {\n          var key = r.keys[i - 1],\n              val = _decodeParam(m[i]);\n\n          if (val !== undefined || !hasOwnProperty.call(params, key)) {\n            params[key] = val;\n          }\n        }\n        return params;\n      }\n\n      function _decodeParam(val) {\n        if (typeof val !== 'string' || val.length === 0) {\n          return val;\n        }\n\n        try {\n          return decodeURIComponent(val);\n        } catch (err) {\n          if (err instanceof URIError) {\n            err.message = 'Failed to decode param \\'' + val + '\\'';\n            err.status = err.statusCode = 400;\n          }\n          throw err;\n        }\n      }\n\n      function _log(l) {\n        if (Object.keys(availablesLogLevels).indexOf(l) > -1 && logLevel >= availablesLogLevels[l]) {\n          for (var _len = arguments.length, msg = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            msg[_key - 1] = arguments[_key];\n          }\n\n          $log[l].apply($log, msg);\n        }\n      }\n\n      function _parseHeaders(headers) {\n        var parsed = {},\n            i;\n\n        function _fillInParsed(key, val) {\n          if (key) {\n            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n          }\n        }\n\n        if (typeof headers === 'string') {\n          headers.split('\\n').forEach(function (line) {\n            i = line.indexOf(':');\n            _fillInParsed(line.substr(0, i).trim().toLowerCase(), line.substr(i + 1).trim());\n          });\n        } else if ((typeof headers === 'undefined' ? 'undefined' : _typeof(headers)) === 'object') {\n          Object.keys(headers).forEach(function (headerKey) {\n            _fillInParsed(headerKey.toLowerCase(), headers[headerKey].trim());\n          });\n        }\n\n        return parsed;\n      }\n\n      function _headersGetter(headers) {\n        var headersObj;\n\n        return function (name) {\n          if (!headersObj) {\n            headersObj = _parseHeaders(headers);\n          }\n\n          if (name) {\n            var value = headersObj[name.toLowerCase()];\n            if (value === void 0) {\n              value = null;\n            }\n            return value;\n          }\n\n          return headersObj;\n        };\n      }\n\n      function _transformData(data, headers, status, fns) {\n        if (typeof fns === 'function') {\n          return fns(data, headers, status);\n        } else if (fns) {\n          var i = void 0;\n          for (i = 0; i < fns.length; i++) {\n            var fn = fns[i];\n            data = fn(data, headers, status);\n          }\n        }\n        if (typeof data === 'string') {\n          data = JSON.parse(data);\n        }\n        return data;\n      }\n\n      function _createMethodWithoutData(name, callback) {\n        return function (url, config) {\n          return _createMethod(name, url, null, config, function (d, r, p) {\n            var resourceId = p[r.key],\n                rData = $mockStorage.getItem(r.id);\n\n            if (resourceId) {\n              var rIndex = rData.findIndex(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (rIndex > -1) {\n                callback(d, r, p, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else if (name === 'get') {\n              callback(d, r, p, rData);\n            } else {\n              _log('info', 'Response : ', 404, { error: 'No Id Given' });\n              d.reject({\n                status: 404,\n                data: { error: 'No Id Given' }\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethodWithData(name, callback) {\n        return function (url, data, config) {\n          return _createMethod(name, url, data, config, function (d, r, p, config) {\n            var resourceId = p[r.key],\n                rData = $mockStorage.getItem(r.id);\n\n            data = _transformData(data, _headersGetter(config.headers), undefined, config.transformRequest);\n\n            if (resourceId) {\n              var rIndex = rData.findIndex(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (rIndex > -1) {\n                callback(d, r, p, data, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else if (name === 'post') {\n              callback(d, r, p, data, rData);\n            } else {\n              _log('info', 'Response : ', 404, { error: 'No Id Given' });\n              d.reject({\n                status: 404,\n                data: { error: 'No Id Given' }\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethod(name, url, data, config, callback) {\n        _log('info', name.toUpperCase() + ' : ', url);\n        if (data) {\n          _log('info', 'Data : ', data);\n        }\n        if (config) {\n          _log('info', 'Config : ', config);\n        }\n        var d = $q.defer();\n        var promise = d.promise;\n\n        var _getResource2 = getResource(url);\n\n        var _getResource3 = _slicedToArray(_getResource2, 2);\n\n        var r = _getResource3[0];\n        var p = _getResource3[1];\n\n        if (r) {\n          config = _extends({\n            transformRequest: defaults.transformRequest,\n            transformResponse: defaults.transformResponse\n          }, config);\n\n          callback(d, r, p, config);\n\n          promise = promise.then(config.transformResponse, config.transformResponse);\n\n          reversedInterceptors.forEach(function (interceptor) {\n            if (interceptor.response || interceptor.responseError) {\n              promise = promise.then(interceptor.response, interceptor.responseError);\n            }\n          });\n        } else {\n          _log('info', 'Not a valid path! Call $http instead.');\n          promise = null;\n        }\n\n        return promise;\n      }\n    }\n  }\n\n  function ModuleConfig($provide) {\n    httpDecorator.$inject = ['$delegate', '$mockRouter'];\n    $provide.decorator('$http', httpDecorator);\n\n    function httpDecorator($delegate, $mockRouter) {\n      var wrapper = function wrapper() {\n        return $delegate.apply($delegate, arguments);\n      };\n\n      Object.keys($delegate).filter(function (k) {\n        return typeof $delegate[k] !== 'function';\n      }).forEach(function (k) {\n        wrapper[k] = $delegate[k];\n        wrapper['original' + k] = $delegate[k];\n      });\n\n      Object.keys($delegate).filter(function (k) {\n        return typeof $delegate[k] === 'function';\n      }).forEach(function (k) {\n        wrapper[k] = function () {\n          if (typeof $mockRouter[k] === 'function') {\n            var promise = $mockRouter[k].apply($mockRouter, arguments);\n            if (promise) {\n              return promise;\n            } else {\n              return $delegate[k].apply($delegate, arguments);\n            }\n          } else {\n            return $delegate[k].apply($delegate, arguments);\n          }\n        };\n      });\n\n      return wrapper;\n    }\n  }\n})(window, window.angular);\n\n},{}]},{},[1])\n\n","(function(window, angular, undefined) {\n  'use strict';\n\n  StorageProvider.$inject = ['$windowProvider'];\n  RouterProvider.$inject = ['$mockStorageProvider', '$httpProvider'];\n  ModuleConfig.$inject = ['$provide'];\n\n  /**\n   * @ngdoc overview\n   * @name ngMockStorage\n   */\n\n  return angular.module('ngMockStorage', [])\n\n    /**\n     * @ngdoc object\n     * @name ngMockStorage.$mockStorage\n     * @requires $window\n     * @requires $log\n     */\n\n    .provider('$mockStorage', StorageProvider)\n\n    /**\n     * @ngdoc object\n     * @name ngMockStorage.$mockRouter\n     * @requires $log\n     * @requires $q\n     */\n\n    .provider('$mockRouter', RouterProvider)\n\n    .config(ModuleConfig);\n\n\n  function StorageProvider($windowProvider) {\n    let provider,\n      $window = $windowProvider.$get(),\n      storageKeyPrefix = 'ngMockStorage-',\n      storageType = 'localStorage',\n      serializer = angular.toJson,\n      deserializer = angular.fromJson;\n\n    StorageService.$inject = ['$window', '$log'];\n\n    provider = {\n      setStorageType : setStorageType,\n      setKeyPrefix : setKeyPrefix,\n      setSerializer : setSerializer,\n      setDeserializer : setDeserializer,\n      setItem : setItem,\n      clear : clear,\n      $get : StorageService\n    };\n\n    return provider;\n\n    function setStorageType(type) {\n      if (typeof type !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setStorageType() expects a String.');\n      }\n      storageType = type;\n    }\n\n    function setKeyPrefix(prefix) {\n      if (typeof prefix !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setKeyPrefix() expects a String.');\n      }\n      storageKeyPrefix = prefix;\n    }\n\n    function setSerializer(s) {\n      if (typeof s !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setSerializer expects a function.');\n      }\n      serializer = s;\n    }\n\n    function setDeserializer(d) {\n      if (typeof d !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setDeserializer expects a function.');\n      }\n      deserializer = d;\n    }\n\n    function getItem(key) {\n      return deserializer($window[storageType].getItem(storageKeyPrefix + key));\n    }\n\n    function setItem(key, value) {\n      return $window[storageType].setItem(storageKeyPrefix + key, serializer(value));\n    }\n\n    function removeItem(key) {\n      return $window[storageType].setItem(storageKeyPrefix + key);\n    }\n\n    function clear() {\n      return $window[storageType].clear();\n    }\n\n    function StorageService($window, $log) {\n      let service;\n\n      if (isStorageSupported(storageType)) {\n        service = {\n          getItem : getItem,\n          setItem : setItem,\n          removeItem : removeItem,\n          clear : clear\n        };\n      } else {\n        $log.warn('This browser does not support Web Storage!');\n        service = {\n          setItem : angular.noop,\n          getItem : angular.noop,\n          removeItem : angular.noop,\n          clear : angular.noop\n        };\n      }\n\n      return service;\n\n      function isStorageSupported() {\n\n        // Some installations of IE, for an unknown reason, throw \"SCRIPT5: Error: Access is denied\"\n        // when accessing window.localStorage. This happens before you try to do anything with it. Catch\n        // that error and allow execution to continue.\n\n        // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari\n        // when \"Block cookies\": \"Always block\" is turned on\n        let supported, key;\n        try {\n          supported = $window[storageType];\n        }\n        catch (err) {\n          supported = false;\n        }\n\n        // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n        // is available, but trying to call .setItem throws an exception below:\n        // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota.\"\n        if (supported && storageType === 'localStorage') {\n          key = '__' + Math.round(Math.random() * 1e7);\n\n          try {\n            localStorage.setItem(key, key);\n            localStorage.removeItem(key);\n          }\n          catch (err) {\n            supported = false;\n          }\n        }\n\n        return supported;\n      }\n    }\n  }\n\n  function RouterProvider($mockStorageProvider, $httpProvider) {\n    let provider,\n      namespace = '',\n      logLevel = 0,\n      availablesLogLevels = {error : 0, warn : 1, info : 2, debug : 3},\n      resources = [];\n\n    RouterService.$inject = ['$log', '$q', '$mockStorage', '$injector'];\n\n    provider = {\n      setNamespace : setNamespace,\n      setLogLevel : setLogLevel,\n      addResource : addResource,\n      loadDatas : loadDatas,\n      $get : RouterService\n    };\n\n    return provider;\n\n    function setNamespace(n) {\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setNamespace expects a string.');\n      }\n      namespace = n;\n    }\n\n    function setLogLevel(l) {\n      if (typeof l !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setLogLevel expects a string (error|warning|info).');\n      }\n      if (Object.keys(availablesLogLevels).indexOf(l) > -1) {\n        logLevel = availablesLogLevels[l];\n      }\n    }\n\n    function addResource(n, o) {\n      let config, resource, parentId;\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (o && typeof o !== 'object') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (n.indexOf('.') > -1) {\n        let pos = n.lastIndexOf('.');\n        parentId = n.substring(0, pos);\n        n = n.substring(pos + 1);\n      }\n\n      config = Object.assign({\n        primaryKey : 'id',\n        collection : true,\n        key : _getKey(n)\n      }, o || {});\n\n      config.parent = parentId;\n\n      resource = _getResource(n);\n\n      if (resource) {\n        throw new TypeError('[ngMockRouter] - Provider.addResource: Resource ' + n + ' already exist.');\n      } else {\n        let newResource = {\n          name : n\n        };\n\n        newResource.primaryKey = config.primaryKey;\n        newResource.key = config.key;\n        newResource.collection = config.collection;\n        newResource.data = config.collection ? [] : {};\n\n        if (config.parent) {\n          let parent = _getResource(config.parent);\n          if (parent) {\n            if (newResource.collection && parent.keys.indexOf(newResource.key) > -1) {\n              throw new TypeError('[ngMockRouter] - Provider.addResource: key ' + newResource.key + ' already exist. You can specify another one with the option key');\n            }\n            newResource.parent = config.parent;\n          }\n        }\n        newResource.path = _getPath(newResource);\n        newResource.id = _getId(newResource);\n        newResource.keys = _getKeys(newResource);\n\n        $mockStorageProvider.setItem(newResource.id, newResource.data);\n\n        resources.push(newResource);\n      }\n    }\n\n    function loadDatas(n, d) {\n      let r = _getResource(n);\n\n      if (r) {\n        if (r.collection && Array.isArray(d)) {\n          $mockStorageProvider.setItem(r.id, d);\n        } else if (!r.collection && !Array.isArray(d) && typeof d === 'object') {\n          $mockStorageProvider.setItem(r.id, d);\n        } else {\n          throw new TypeError('[ngMockRouter] - Provider.loadDatas: Datas not valid.');\n        }\n      } else {\n        throw new TypeError('[ngMockRouter] - Provider.loadDatas: Resource ' + n + ' do not exist.');\n      }\n    }\n\n    function _getResource(n) {\n      return resources.find(r => r.id === n);\n    }\n\n    function _getKey(n) {\n      return 'id' + n.charAt(0).toUpperCase() + n.substr(1).toLowerCase();\n    }\n\n    function _getPath(r) {\n      let path = '';\n      if (r.parent) {\n        path += _getResource(r.parent).path + '/';\n      }\n      path += r.name + (r.collection ? '/:' + r.key : '');\n\n      return path;\n    }\n\n    function _getId(r) {\n      let id = '';\n      if (r.parent) {\n        id += _getResource(r.parent).id + '.';\n      }\n      id += r.name;\n\n      return id;\n    }\n\n    function _getKeys(r) {\n      let keys = [];\n      if (r.parent && r.collection) {\n        keys = [..._getResource(r.parent).keys, r.key];\n      } else if (r.parent) {\n        keys = _getResource(r.parent).keys;\n      } else if (r.collection) {\n        keys = [r.key];\n      }\n      return keys;\n    }\n\n    function RouterService($log, $q, $mockStorage, $injector) {\n      let interceptors = $httpProvider.interceptors,\n        reversedInterceptors = [],\n        defaults = $httpProvider.defaults,\n        service = {\n          get : get(),\n          post : post(),\n          put : put(),\n          delete : remove(),\n          patch : patch(),\n          getResource : getResource,\n          interceptors : interceptors\n        };\n\n\n      interceptors.forEach(function(interceptorFactory) {\n        reversedInterceptors.unshift((typeof interceptorFactory === 'string') ?\n          $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n      });\n\n      return service;\n\n      function get() {\n        return _createMethodWithoutData('get', function(d, r, p, rData, rIndex) {\n          if (typeof rIndex !== 'undefined' && rIndex !== null) {\n            rData = rData[rIndex];\n          }\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status : 200,\n            data : rData\n          });\n        });\n      }\n\n      function post() {\n        return _createMethodWithData('post', function(d, r, p, data, rData) {\n          let id = Math.random().toString(36).substring(2);\n          if (Array.isArray(rData)) {\n            data[r.primaryKey] = id;\n            rData.push(data);\n            $mockStorage.setItem(r.id, rData);\n            _log('info', 'Response : ', 200, data);\n            d.resolve({\n              status : 200,\n              data : data\n            });\n          } else {\n            _log('info', 'Response : ', 405, {error : 'Method Not Allowed'});\n            d.reject({\n              status : 405,\n              data : {error : 'Method Not Allowed'}\n            });\n          }\n        });\n      }\n\n      function put() {\n        return _createMethodWithData('put', function(d, r, p, data, rData, rIndex) {\n          rData[rIndex] = data;\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status : 200,\n            data : rData[rIndex]\n          });\n        });\n      }\n\n      function remove() {\n        return _createMethodWithoutData('delete', function(d, r, p, rData, rIndex) {\n          rData.splice(rIndex, 1);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData);\n          d.resolve({\n            status : 200,\n            data : rData\n          });\n        });\n      }\n\n      function patch() {\n        return _createMethodWithData('patch', function(d, r, p, data, rData, rIndex) {\n          Object.assign(rData[rIndex], data);\n          $mockStorage.setItem(r.id, rData);\n          _log('info', 'Response : ', 200, rData[rIndex]);\n          d.resolve({\n            status : 200,\n            data : rData[rIndex]\n          });\n        });\n      }\n\n      function getResource(path) {\n        path = ('/' + path + '/').replace(/\\/\\//g, '/');\n        let r = resources.find((r) => {\n          return _getRegex(r.path).test(path);\n        });\n        if (r) {\n          return [r, _getParams(path, r)];\n        } else {\n          return [null, null];\n        }\n      }\n\n      function _getRegex(path) {\n        path = '/' + namespace + '/' + path + '/';\n        return new RegExp('^' +\n          path.replace(/\\/\\//g, '/')\n            .replace(/\\//g, '\\\\/')\n            .replace(/\\:[\\w]*/g, '(?:([^\\\\/]*))') +\n          '?$');\n      }\n\n      function _getParams(path, r) {\n        let i,\n          params = {},\n          m = path.match(_getRegex(r.path));\n\n        for (i = 1; i < m.length; i++) {\n          let key = r.keys[i - 1],\n            val = _decodeParam(m[i]);\n\n          if (val !== undefined || !(hasOwnProperty.call(params, key))) {\n            params[key] = val;\n          }\n        }\n        return params;\n      }\n\n      function _decodeParam(val) {\n        if (typeof val !== 'string' || val.length === 0) {\n          return val;\n        }\n\n        try {\n          return decodeURIComponent(val);\n        } catch (err) {\n          if (err instanceof URIError) {\n            err.message = 'Failed to decode param \\'' + val + '\\'';\n            err.status = err.statusCode = 400;\n          }\n          throw err;\n        }\n      }\n\n      function _log(l, ...msg) {\n        if (Object.keys(availablesLogLevels).indexOf(l) > -1 && logLevel >= availablesLogLevels[l]) {\n          $log[l](...msg);\n        }\n      }\n\n      function _parseHeaders(headers) {\n        var parsed = {},\n          i;\n\n        function _fillInParsed(key, val) {\n          if (key) {\n            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n          }\n        }\n\n        if (typeof headers === 'string') {\n          headers.split('\\n').forEach(function(line) {\n            i = line.indexOf(':');\n            _fillInParsed(line.substr(0, i).trim().toLowerCase(), line.substr(i + 1).trim());\n          });\n        } else if (typeof headers === 'object') {\n          Object.keys(headers).forEach(function(headerKey) {\n            _fillInParsed(headerKey.toLowerCase(), headers[headerKey].trim());\n          });\n        }\n\n        return parsed;\n      }\n\n      function _headersGetter(headers) {\n        var headersObj;\n\n        return function(name) {\n          if (!headersObj) {\n            headersObj = _parseHeaders(headers);\n          }\n\n          if (name) {\n            var value = headersObj[name.toLowerCase()];\n            if (value === void 0) {\n              value = null;\n            }\n            return value;\n          }\n\n          return headersObj;\n        };\n      }\n\n      function _transformData(data, headers, status, fns) {\n        if (typeof fns === 'function') {\n          return fns(data, headers, status);\n        } else if (fns) {\n          let i;\n          for (i = 0; i < fns.length; i++) {\n            let fn = fns[i];\n            data = fn(data, headers, status);\n          }\n        }\n        if (typeof data === 'string') {\n          data = JSON.parse(data);\n        }\n        return data;\n      }\n\n      function _createMethodWithoutData(name, callback) {\n        return function(url, config) {\n          return _createMethod(name, url, null, config, function(d, r, p) {\n            let resourceId = p[r.key],\n              rData = $mockStorage.getItem(r.id);\n\n            if (resourceId) {\n              let rIndex = rData.findIndex((item) => String(item[r.primaryKey]) === String(resourceId));\n              if (rIndex > -1) {\n                callback(d, r, p, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, {error : 'Not Found'});\n                d.reject({\n                  status : 404,\n                  data : {error : 'Not Found'}\n                });\n              }\n            } else if (name === 'get') {\n              callback(d, r, p, rData);\n            } else {\n              _log('info', 'Response : ', 404, {error : 'No Id Given'});\n              d.reject({\n                status : 404,\n                data : {error : 'No Id Given'}\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethodWithData(name, callback) {\n        return function(url, data, config) {\n          return _createMethod(name, url, data, config, function(d, r, p, config) {\n            let resourceId = p[r.key],\n              rData = $mockStorage.getItem(r.id);\n\n            data = _transformData(data, _headersGetter(config.headers), undefined, config.transformRequest);\n\n            if (resourceId) {\n              let rIndex = rData.findIndex((item) => String(item[r.primaryKey]) === String(resourceId));\n              if (rIndex > -1) {\n                callback(d, r, p, data, rData, rIndex);\n              } else {\n                _log('info', 'Response : ', 404, {error : 'Not Found'});\n                d.reject({\n                  status : 404,\n                  data : {error : 'Not Found'}\n                });\n              }\n            } else if (name === 'post') {\n              callback(d, r, p, data, rData);\n            } else {\n              _log('info', 'Response : ', 404, {error : 'No Id Given'});\n              d.reject({\n                status : 404,\n                data : {error : 'No Id Given'}\n              });\n            }\n          });\n        };\n      }\n\n      function _createMethod(name, url, data, config, callback) {\n        _log('info', name.toUpperCase() + ' : ', url);\n        if (data) {\n          _log('info', 'Data : ', data);\n        }\n        if (config) {\n          _log('info', 'Config : ', config);\n        }\n        let d = $q.defer(),\n          promise = d.promise,\n          [r, p] = getResource(url);\n\n        if (r) {\n          config = Object.assign({\n            transformRequest : defaults.transformRequest,\n            transformResponse : defaults.transformResponse\n          }, config);\n\n          callback(d, r, p, config);\n\n          promise = promise.then(config.transformResponse, config.transformResponse);\n\n          reversedInterceptors.forEach(function(interceptor) {\n            if (interceptor.response || interceptor.responseError) {\n              promise = promise.then(interceptor.response, interceptor.responseError);\n            }\n          });\n        } else {\n          _log('info', 'Not a valid path! Call $http instead.');\n          promise = null;\n        }\n\n        return promise;\n      }\n    }\n  }\n\n  function ModuleConfig($provide) {\n    httpDecorator.$inject = ['$delegate', '$mockRouter'];\n    $provide.decorator('$http', httpDecorator);\n\n    function httpDecorator($delegate, $mockRouter) {\n      let wrapper = function() {\n        return $delegate.apply($delegate, arguments);\n      };\n\n      Object.keys($delegate).filter((k)=> typeof $delegate[k] !== 'function')\n        .forEach((k)=> {\n          wrapper[k] = $delegate[k];\n          wrapper[`original${k}`] = $delegate[k];\n        });\n\n      Object.keys($delegate).filter((k)=> typeof $delegate[k] === 'function')\n        .forEach((k)=> {\n          wrapper[k] = function() {\n            if (typeof $mockRouter[k] === 'function') {\n              let promise = $mockRouter[k].apply($mockRouter, arguments);\n              if (promise) {\n                return promise;\n              } else {\n                return $delegate[k].apply($delegate, arguments);\n              }\n            } else {\n              return $delegate[k].apply($delegate, arguments);\n            }\n          };\n        });\n\n      return wrapper;\n    }\n  }\n})(window, window.angular);\n"],"sourceRoot":"/source/"}