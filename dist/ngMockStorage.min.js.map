{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","ngMockStorage.min.js","ngMockStorage.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_toConsumableArray","arr","Array","isArray","arr2","from","_typeof","obj","Symbol","constructor","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","iterator","next","done","push","value","err","Object","TypeError","window","angular","StorageProvider","$windowProvider","setStorageType","type","storageType","setKeyPrefix","prefix","storageKeyPrefix","setSerializer","serializer","setDeserializer","d","deserializer","getItem","key","$window","setItem","removeItem","clear","StorageService","$log","isStorageSupported","supported","Math","round","random","localStorage","service","warn","noop","provider","$get","toJson","fromJson","$inject","RouterProvider","$mockStorageProvider","setNamespace","namespace","setLogLevel","keys","availablesLogLevels","indexOf","logLevel","addResource","options","resource","assign","primaryKey","collection","parent","_getKey","_getResource","newResource","name","data","path","_getPath","id","_getId","_getKeys","resources","p","find","charAt","toUpperCase","substr","toLowerCase","concat","RouterService","$q","$mockStorage","get","url","_log","rData","defer","_getResource2","getResource","_getResource3","resourceId","result","item","String","resolve","status","error","reject","promise","post","toString","substring","_getResource4","_getResource5","put","_getResource6","_getResource7","rIndex","findIndex","remove","_getResource8","_getResource9","splice","patch","_getResource10","_getResource11","replace","_getRegex","test","_getParams","RegExp","params","m","match","val","_decodeParam","hasOwnProperty","decodeURIComponent","URIError","message","statusCode","_len","arguments","msg","_key","apply","info","debug","ModuleConfig","$provide","httpDecorator","$delegate","$mockRouter","wrapper","filter","k","forEach","decorator","config"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCCA,YAIA,SAASK,GAAmBC,GAAO,GAAIC,MAAMC,QAAQF,GAAM,CAAE,IAAK,GAAIX,GAAI,EAAGc,EAAOF,MAAMD,EAAIJ,QAASP,EAAIW,EAAIJ,OAAQP,IAAOc,EAAKd,GAAKW,EAAIX,EAAM,OAAOc,GAAe,MAAOF,OAAMG,KAAKJ,GAE1L,QAASK,GAAQC,GAAO,MAAOA,IAAyB,mBAAXC,SAA0BD,EAAIE,cAAgBD,OAAS,eAAkBD,GAJtH,GAAIG,GAAiB,WAAe,QAASC,GAAcV,EAAKX,GAAK,GAAIsB,MAAeC,GAAK,EAAUC,GAAK,EAAWC,EAAKC,MAAW,KAAM,IAAK,GAAiCC,GAA7BC,EAAKjB,EAAIO,OAAOW,cAAmBN,GAAMI,EAAKC,EAAGE,QAAQC,QAAoBT,EAAKU,KAAKL,EAAGM,QAAYjC,GAAKsB,EAAKf,SAAWP,GAA3DuB,GAAK,IAAoE,MAAOW,GAAOV,GAAK,EAAMC,EAAKS,EAAO,QAAU,KAAWX,GAAMK,EAAG,WAAWA,EAAG,YAAe,QAAU,GAAIJ,EAAI,KAAMC,IAAQ,MAAOH,GAAQ,MAAO,UAAUX,EAAKX,GAAK,GAAIY,MAAMC,QAAQF,GAAQ,MAAOA,EAAY,IAAIO,OAAOW,WAAYM,QAAOxB,GAAQ,MAAOU,GAAcV,EAAKX,EAAa,MAAM,IAAIoC,WAAU,6DCHvlB,SAAUC,EAAQC,EAASZ,GAkCzB,QAASa,GAAgBC,GAsBvB,QAASC,GAAeC,GACtB,GAAoB,gBAATA,GACT,KAAM,IAAIN,WAAU,gEAEtBO,GAAcD,EAGhB,QAASE,GAAaC,GACpB,GAAsB,gBAAXA,GACT,KAAM,IAAIT,WAAU,8DAEtBU,GAAmBD,EAGrB,QAASE,GAAcpD,GACrB,GAAiB,kBAANA,GACT,KAAM,IAAIyC,WAAU,+DAEtBY,GAAarD,EAGf,QAASsD,GAAgBC,GACvB,GAAiB,kBAANA,GACT,KAAM,IAAId,WAAU,iEAEtBe,GAAeD,EAGjB,QAASE,GAAQC,GACf,MAAOF,GAAaG,EAAQX,GAAaS,QAAQN,EAAmBO,IAGtE,QAASE,GAAQF,EAAKpB,GACpB,MAAOqB,GAAQX,GAAaY,QAAQT,EAAmBO,EAAKL,EAAWf,IAGzE,QAASuB,GAAWH,GAClB,MAAOC,GAAQX,GAAaY,QAAQT,EAAmBO,GAGzD,QAASI,KACP,MAAOH,GAAQX,GAAac,QAG9B,QAASC,GAAeJ,EAASK,GAsB/B,QAASC,KAQP,GAAIC,GAAS,OAAER,EAAG,MAClB,KACEQ,EAAYP,EAAQX,GAEtB,MAAOT,GACL2B,GAAY,EACb,GAKGA,GAA6B,iBAAhBlB,EAAgC,CAC/CU,EAAM,KAAOS,KAAKC,MAAsB,IAAhBD,KAAKE,SAE7B,KACEC,aAAaV,QAAQF,EAAKA,GAC1BY,aAAaT,WAAWH,GAE1B,MAAOnB,GACL2B,GAAY,GAIhB,MAAOA,GApDT,GAAIK,GAAO,MAmBX,OAjBIN,GAAmBjB,GACrBuB,GACEd,QAAaA,EACbG,QAAaA,EACbC,WAAaA,EACbC,MAAaA,IAGfE,EAAKQ,KAAK,8CACVD,GACEX,QAAajB,EAAQ8B,KACrBhB,QAAad,EAAQ8B,KACrBZ,WAAalB,EAAQ8B,KACrBX,MAAanB,EAAQ8B,OAIlBF,EArFT,GAAIG,GAAQ,OACRf,EAAmBd,EAAgB8B,OACnCxB,EAAmB,iBACnBH,EAAmB,eACnBK,EAAmBV,EAAQiC,OAC3BpB,EAAmBb,EAAQkC,QAc/B,OAZAd,GAAee,SAAW,UAAW,QAErCJ,GACE5B,eAAkBA,EAClBG,aAAkBA,EAClBG,cAAkBA,EAClBE,gBAAkBA,EAClBM,QAAkBA,EAClBE,MAAkBA,EAClBa,KAAkBZ,GA2GtB,QAASgB,GAAeC,GAkBtB,QAASC,GAAanF,GACpB,GAAiB,gBAANA,GACT,KAAM,IAAI2C,WAAU,2DAEtByC,GAAYpF,EAGd,QAASqF,GAAY1E,GACnB,GAAiB,gBAANA,GACT,KAAM,IAAIgC,WAAU,+EAElBD,QAAO4C,KAAKC,GAAqBC,QAAQ7E,GAAK,KAChD8E,EAAWF,EAAoB5E,IAInC,QAAS+E,GAAY1F,EAAGG,GACtB,GAAIwF,GAAO,OAAEC,EAAQ,MACrB,IAAiB,gBAAN5F,GACT,KAAM,IAAI2C,WAAU,kEAGtB,IAAIxC,GAAkB,YAAL,mBAADA,GAAC,YAAAoB,EAADpB,IACd,KAAM,IAAIwC,WAAU,kEAYtB,IATAgD,EAAUjD,OAAOmD,QACfC,WAAa,KACbC,YAAa,EACbC,OAAa,KACbpC,IAAaqC,EAAQjG,IACpBG,OAEHyF,EAAWM,EAAalG,EAAG2F,EAAQK,QAGjC,KAAM,IAAIrD,WAAU,mDAAqD3C,EAAI,kBAE7E,IAAImG,IACFC,KAAOpG,EAQT,IALAmG,EAAYL,WAAaH,EAAQG,WACjCK,EAAYvC,IAAa+B,EAAQ/B,IACjCuC,EAAYJ,WAAaJ,EAAQI,WACjCI,EAAYE,KAAaV,EAAQI,iBAE7BJ,EAAQK,OAAQ,CAClB,GAAIA,GAASE,EAAaP,EAAQK,OAClC,IAAIA,EAAQ,CACV,GAAIG,EAAYJ,YAAcC,EAAOV,KAAKE,QAAQW,EAAYvC,KAAO,GACnE,KAAM,IAAIjB,WAAU,8CAAgDwD,EAAYvC,IAAM,kEAExFuC,GAAYH,OAASL,EAAQK,QAGjCG,EAAYG,KAAOC,EAASJ,GAC5BA,EAAYK,GAAOC,EAAON,GAC1BA,EAAYb,KAAOoB,EAASP,GAE5BjB,EAAqBpB,QAAQqC,EAAYK,GAAIL,EAAYE,MAEzDM,EAAUpE,KAAK4D,GAInB,QAASD,GAAalG,EAAG4G,GACvB,MAAOD,GAAUE,KAAK,SAAC5G,GACrB,MAAI2G,GACM3G,EAAEmG,OAASpG,GAAKC,EAAE+F,SAAWY,EAE9B3G,EAAEmG,OAASpG,IAKxB,QAASiG,GAAQjG,GACf,MAAO,KAAOA,EAAE8G,OAAO,GAAGC,cAAgB/G,EAAEgH,OAAO,GAAGC,cAGxD,QAASV,GAAStG,GAChB,GAAIqG,GAAO,EAMX,OALIrG,GAAE+F,SACJM,GAAQJ,EAAajG,EAAE+F,QAAQM,KAAO,KAExCA,GAAQrG,EAAEmG,MAAQnG,EAAE8F,WAAa,KAAO9F,EAAE2D,IAAM,IAKlD,QAAS6C,GAAOxG,GACd,GAAIuG,GAAK,EAMT,OALIvG,GAAE+F,SACJQ,GAAMN,EAAajG,EAAE+F,QAAQQ,GAAK,KAEpCA,GAAMvG,EAAEmG,KAKV,QAASM,GAASzG,GAChB,GAAIqF,KAQJ,OAPIrF,GAAE+F,QAAU/F,EAAE8F,WAChBT,KAAI4B,OAAAjG,EAAOiF,EAAajG,EAAE+F,QAAQV,OAAMrF,EAAE2D,MACjC3D,EAAE+F,OACXV,EAAOY,EAAajG,EAAE+F,QAAQV,KACrBrF,EAAE8F,aACXT,GAAQrF,EAAE2D,MAEL0B,EAGT,QAAS6B,GAAcjD,EAAMkD,EAAIC,GAW/B,QAASC,GAAIC,EAAK5B,GAChB6B,EAAK,OAAQ,SAAUD,GACnB5B,GACF6B,EAAK,OAAQ,aAAc7B,EAEzB,IAAA8B,GAAK,OACLhE,EAAI2D,EAAGM,QDQPC,ECPSC,EAAYL,GDSrBM,EAAgBlG,EAAegG,EAAe,GCT7C1H,EAAC4H,EAAA,GAAEjB,EAACiB,EAAA,EAkCT,OAhCI5H,IDaF,WCZA,GAAI6H,GAAalB,EAAE3G,EAAE2D,IAErB,IADA6D,EAAiBJ,EAAa1D,QAAQ1D,EAAEuG,IACpCsB,EAAY,CACd,GAAIC,GAASN,EAAMZ,KAAK,SAACmB,GDcrB,MCd8BC,QAAOD,EAAK/H,EAAE6F,eAAiBmC,OAAOH,IACpEC,IACFP,EAAK,OAAQ,cAAe,IAAKO,GACjCtE,EAAEyE,SACAC,OAAS,IACT9B,KAAS0B,MAGXP,EAAK,OAAQ,cAAe,KAAMY,MAAQ,cAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,oBAItBZ,GAAK,OAAQ,cAAe,IAAKC,GACjChE,EAAEyE,SACAC,OAAS,IACT9B,KAASoB,QAIbD,EAAK,OAAQ,cAAe,KAAMY,MAAQ,sBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,wBAGf3E,EAAE6E,QAGX,QAASC,GAAKhB,EAAKlB,EAAMV,GACvB6B,EAAK,OAAQ,UAAWD,GACxBC,EAAK,OAAQ,UAAWnB,GACpBV,GACF6B,EAAK,OAAQ,aAAc7B,EAEzB,IAAA8B,GAAK,OACLhE,EAAK2D,EAAGM,QACRlB,EAAKnC,KAAKE,SAASiE,SAAS,IAAIC,UAAU,GDkB1CC,ECjBSd,EAAYL,GDmBrBoB,EAAgBhH,EAAe+G,EAAe,GCnB7CzI,EAAC0I,EAAA,EAAGA,GAAA,EA2BT,OAzBI1I,IACFwH,EAAQJ,EAAa1D,QAAQ1D,EAAEuG,IAC3BrF,MAAMC,QAAQqG,IAChBpB,EAAKpG,EAAE6F,YAAcU,EACrBiB,EAAMlF,KAAK8D,GACXgB,EAAavD,QAAQ7D,EAAEuG,GAAIiB,GAC3BD,EAAK,OAAQ,cAAe,IAAKnB,GACjC5C,EAAEyE,SACAC,OAAS,IACT9B,KAASA,MAGXmB,EAAK,OAAQ,cAAe,KAAMY,MAAQ,uBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,2BAItBZ,EAAK,OAAQ,cAAe,KAAMY,MAAQ,sBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,wBAGf3E,EAAE6E,QAIX,QAASM,GAAIrB,EAAKlB,EAAMV,GACtB6B,EAAK,OAAQ,SAAUD,GACvBC,EAAK,OAAQ,UAAWnB,GACpBV,GACF6B,EAAK,OAAQ,aAAc7B,EAEzB,IAAA8B,GAAK,OACLhE,EAAI2D,EAAGM,QDuBPmB,ECtBSjB,EAAYL,GDwBrBuB,EAAgBnH,EAAekH,EAAe,GCxB7C5I,EAAC6I,EAAA,GAAElC,EAACkC,EAAA,EAoCT,OAlCI7I,ID4BF,WC3BA,GAAI6H,GAAalB,EAAE3G,EAAE2D,IAErB,IADA6D,EAAiBJ,EAAa1D,QAAQ1D,EAAEuG,IACpCsB,EAAY,CACd,GAAIiB,GAAStB,EAAMuB,UAAU,SAAChB,GD6B1B,MC7BmCC,QAAOD,EAAK/H,EAAE6F,eAAiBmC,OAAOH,IACzEiB,GAAS,IACXtB,EAAMsB,GAAU1C,EAChBgB,EAAavD,QAAQ7D,EAAEuG,GAAIiB,GAC3BD,EAAK,OAAQ,cAAe,IAAKC,EAAMsB,IACvCtF,EAAEyE,SACAC,OAAS,IACT9B,KAASoB,EAAMsB,OAGjBvB,EAAK,OAAQ,cAAe,KAAMY,MAAQ,cAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,oBAItBZ,GAAK,OAAQ,cAAe,KAAMY,MAAQ,gBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,qBAItBZ,EAAK,OAAQ,cAAe,KAAMY,MAAQ,sBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,wBAGf3E,EAAE6E,QAGX,QAASW,GAAO1B,EAAK5B,GACnB6B,EAAK,OAAQ,YAAaD,GACtB5B,GACF6B,EAAK,OAAQ,aAAc7B,EAEzB,IAAA8B,GAAK,OACLhE,EAAI2D,EAAGM,QDiCPwB,EChCStB,EAAYL,GDkCrB4B,EAAgBxH,EAAeuH,EAAe,GClC7CjJ,EAACkJ,EAAA,GAAEvC,EAACuC,EAAA,EAoCT,OAlCIlJ,IDsCF,WCrCA,GAAI6H,GAAalB,EAAE3G,EAAE2D,IAErB,IADA6D,EAAiBJ,EAAa1D,QAAQ1D,EAAEuG,IACpCsB,EAAY,CACd,GAAIiB,GAAStB,EAAMuB,UAAU,SAAChB,GDuC1B,MCvCmCC,QAAOD,EAAK/H,EAAE6F,eAAiBmC,OAAOH,IACzEiB,GAAS,IACXtB,EAAM2B,OAAOL,EAAQ,GACrB1B,EAAavD,QAAQ7D,EAAEuG,GAAIiB,GAC3BD,EAAK,OAAQ,cAAe,IAAKC,GACjChE,EAAEyE,SACAC,OAAS,IACT9B,KAASoB,MAGXD,EAAK,OAAQ,cAAe,KAAMY,MAAQ,cAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,oBAItBZ,GAAK,OAAQ,cAAe,KAAMY,MAAQ,gBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,qBAItBZ,EAAK,OAAQ,cAAe,KAAMY,MAAQ,sBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,wBAGf3E,EAAE6E,QAGX,QAASe,GAAM9B,EAAKlB,EAAMV,GACxB6B,EAAK,OAAQ,WAAYD,GACzBC,EAAK,OAAQ,UAAWnB,GACpBV,GACF6B,EAAK,OAAQ,aAAc7B,EAEzB,IAAA8B,GAAK,OACLhE,EAAI2D,EAAGM,QD2CP4B,EC1CS1B,EAAYL,GD4CrBgC,EAAiB5H,EAAe2H,EAAgB,GC5C/CrJ,EAACsJ,EAAA,GAAE3C,EAAC2C,EAAA,EAoCT,OAlCItJ,IDgDF,WC/CA,GAAI6H,GAAalB,EAAE3G,EAAE2D,IAErB,IADA6D,EAAiBJ,EAAa1D,QAAQ1D,EAAEuG,IACpCsB,EAAY,CACd,GAAIiB,GAAStB,EAAMuB,UAAU,SAAChB,GDiD1B,MCjDmCC,QAAOD,EAAK/H,EAAE6F,eAAiBmC,OAAOH,IACzEiB,GAAS,IACXrG,OAAOmD,OAAO4B,EAAMsB,GAAS1C,GAC7BgB,EAAavD,QAAQ7D,EAAEuG,GAAIiB,GAC3BD,EAAK,OAAQ,cAAe,IAAKC,EAAMsB,IACvCtF,EAAEyE,SACAC,OAAS,IACT9B,KAASoB,EAAMsB,OAGjBvB,EAAK,OAAQ,cAAe,KAAMY,MAAQ,cAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,oBAItBZ,GAAK,OAAQ,cAAe,KAAMY,MAAQ,gBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,qBAItBZ,EAAK,OAAQ,cAAe,KAAMY,MAAQ,sBAC1C3E,EAAE4E,QACAF,OAAS,IACT9B,MAAU+B,MAAQ,wBAGf3E,EAAE6E,QAGX,QAASV,GAAYtB,GACnBA,GAAS,IAAMA,EAAO,KAAKkD,QAAQ,QAAS,IAC5C,IAAIvJ,GAAI0G,EAAUE,KAAK,SAAC5G,GACtB,MAAOwJ,GAAUxJ,EAAEqG,MAAMoD,KAAKpD,IAEhC,OAAIrG,IACMA,EAAG0J,EAAWrD,EAAMrG,KAEpB,KAAM,MAIlB,QAASwJ,GAAUnD,GAEjB,MADAA,GAAO,IAAMlB,EAAY,IAAMkB,EAAO,IAC/B,GAAIsD,QAAO,IAChBtD,EAAKkD,QAAQ,QAAS,KACnBA,QAAQ,MAAO,OACfA,QAAQ,WAAY,iBACvB,MAGJ,QAASG,GAAWrD,EAAMrG,GACxB,GAAIM,GAAC,OACDsJ,KACAC,EAASxD,EAAKyD,MAAMN,EAAUxJ,EAAEqG,MAEpC,KAAK/F,EAAI,EAAGA,EAAIuJ,EAAEhJ,OAAQP,IAAK,CAC7B,GAAIqD,GAAM3D,EAAEqF,KAAK/E,EAAI,GACjByJ,EAAMC,EAAaH,EAAEvJ,GAErByJ,KAAQ/H,GAAeiI,eAAerJ,KAAKgJ,EAAQjG,KACrDiG,EAAOjG,GAAOoG,GAGlB,MAAOH,GAGT,QAASI,GAAaD,GACpB,GAAmB,gBAARA,IAAmC,IAAfA,EAAIlJ,OACjC,MAAOkJ,EAGT,KACE,MAAOG,oBAAmBH,GAC1B,MAAOvH,GAKP,KAJIA,aAAe2H,YACjB3H,EAAI4H,QAAU,2BAA8BL,EAAM,IAClDvH,EAAI0F,OAAU1F,EAAI6H,WAAa,KAE3B7H,GAIV,QAAS+E,GAAK7G,GACZ,GAAI+B,OAAO4C,KAAKC,GAAqBC,QAAQ7E,GAAK,IAAM8E,GAAYF,EAAoB5E,GAAI,CDgD1F,IAAK,GAAI4J,GAAOC,UAAU1J,OCjDV2J,EAAGtJ,MAAAoJ,EAAA,EAAAA,EAAA,EAAA,GAAAG,EAAA,EAAAH,EAAAG,EAAAA,IAAHD,EAAGC,EAAA,GAAAF,UAAAE,EAEnBxG,GAAKvD,GAACgK,MAANzG,EAAWuG,IAjSf,GAAIhG,IACF6C,IAAcA,EACdiB,KAAcA,EACdK,IAAcA,EACdK,OAAcA,EACdI,MAAcA,EACdzB,YAAcA,EAEhB,OAAOnD,GA1IT,GAAIG,GAAQ,OACRQ,EAAsB,GACtBK,EAAsB,EACtBF,GAAuB6C,MAAQ,EAAG1D,KAAO,EAAGkG,KAAO,EAAGC,MAAQ,GAC9DlE,IAWJ,OATAQ,GAAcnC,SAAW,OAAQ,KAAM,gBAEvCJ,GACEO,aAAeA,EACfE,YAAeA,EACfK,YAAeA,EACfb,KAAesC,GA6ZnB,QAAS2D,GAAaC,GAIpB,QAASC,GAAcC,EAAWC,GAChC,GAAIC,GAAU,WACZ,MAAOF,GAAUN,MAAMM,EAAWT,WAyBpC,OAxBE9H,QAGK4C,KAAK2F,GAAWG,OAAO,SAACC,GDoD7B,MCpD0D,kBAAjBJ,GAAUI,KAClDC,QAAQ,SAACD,GACRF,EAAQE,GAAK,WACX,MAAOJ,GAAUI,GAAGV,MAAMM,EAAWT,cAG3CW,EAAa,IAAO,WAClB,MAAOD,GAAY5D,IAAGqD,MAAfO,EAAmBV,YAE5BW,EAAc,KAAM,WAClB,MAAOD,GAAY3C,KAAIoC,MAAhBO,EAAoBV,YAE7BW,EAAa,IAAO,WAClB,MAAOD,GAAYtC,IAAG+B,MAAfO,EAAmBV,YAE5BW,EAAe,MAAK,WAClB,MAAOD,GAAY7B,MAAKsB,MAAjBO,EAAqBV,YAE9BW,EAAQ,UAAY,WAClB,MAAOD,GAAYjC,OAAM0B,MAAlBO,EAAsBV,YAExBW,EA9BTH,EAAchG,SAAW,YAAa,eACtC+F,EAASQ,UAAU,QAASP,GAtkBqB,MADnDlI,GAAgBkC,SAAW,mBAC3BC,EAAeD,SAAY,wBAOpBnC,EAAQ7B,OAAO,oBASnB4D,SAAS,eAAgB9B,GASzB8B,SAAS,cAAeK,GAExBuG,QAAQ,WAAYV,KA2kBtBlI,OAAQA,OAAOC,mBDsDP","file":"ngMockStorage.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  StorageProvider.$inject = ['$windowProvider'];\n  RouterProvider.$inject = ['$mockStorageProvider'];\n\n  /**\n   * @ngdoc overview\n   * @name ngMockStorage\n   */\n\n  return angular.module('ngMockStorage', [])\n\n  /**\n   * @ngdoc object\n   * @name ngMockStorage.$mockStorage\n   * @requires $window\n   * @requires $log\n   */\n\n  .provider('$mockStorage', StorageProvider)\n\n  /**\n   * @ngdoc object\n   * @name ngMockStorage.$mockRouter\n   * @requires $log\n   * @requires $q\n   */\n\n  .provider('$mockRouter', RouterProvider).config(['$provide', ModuleConfig]);\n\n  function StorageProvider($windowProvider) {\n    var provider = void 0,\n        $window = $windowProvider.$get(),\n        storageKeyPrefix = 'ngMockStorage-',\n        storageType = 'localStorage',\n        serializer = angular.toJson,\n        deserializer = angular.fromJson;\n\n    StorageService.$inject = ['$window', '$log'];\n\n    provider = {\n      setStorageType: setStorageType,\n      setKeyPrefix: setKeyPrefix,\n      setSerializer: setSerializer,\n      setDeserializer: setDeserializer,\n      setItem: setItem,\n      clear: clear,\n      $get: StorageService\n    };\n\n    return provider;\n\n    function setStorageType(type) {\n      if (typeof type !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setStorageType() expects a String.');\n      }\n      storageType = type;\n    }\n\n    function setKeyPrefix(prefix) {\n      if (typeof prefix !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setKeyPrefix() expects a String.');\n      }\n      storageKeyPrefix = prefix;\n    }\n\n    function setSerializer(s) {\n      if (typeof s !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setSerializer expects a function.');\n      }\n      serializer = s;\n    }\n\n    function setDeserializer(d) {\n      if (typeof d !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setDeserializer expects a function.');\n      }\n      deserializer = d;\n    }\n\n    function getItem(key) {\n      return deserializer($window[storageType].getItem(storageKeyPrefix + key));\n    }\n\n    function setItem(key, value) {\n      return $window[storageType].setItem(storageKeyPrefix + key, serializer(value));\n    }\n\n    function removeItem(key) {\n      return $window[storageType].setItem(storageKeyPrefix + key);\n    }\n\n    function clear() {\n      return $window[storageType].clear();\n    }\n\n    function StorageService($window, $log) {\n      var service = void 0;\n\n      if (isStorageSupported(storageType)) {\n        service = {\n          getItem: getItem,\n          setItem: setItem,\n          removeItem: removeItem,\n          clear: clear\n        };\n      } else {\n        $log.warn('This browser does not support Web Storage!');\n        service = {\n          setItem: angular.noop,\n          getItem: angular.noop,\n          removeItem: angular.noop,\n          clear: angular.noop\n        };\n      }\n\n      return service;\n\n      function isStorageSupported() {\n\n        // Some installations of IE, for an unknown reason, throw \"SCRIPT5: Error: Access is denied\"\n        // when accessing window.localStorage. This happens before you try to do anything with it. Catch\n        // that error and allow execution to continue.\n\n        // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari\n        // when \"Block cookies\": \"Always block\" is turned on\n        var supported = void 0,\n            key = void 0;\n        try {\n          supported = $window[storageType];\n        } catch (err) {\n          supported = false;\n        }\n\n        // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n        // is available, but trying to call .setItem throws an exception below:\n        // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota.\"\n        if (supported && storageType === 'localStorage') {\n          key = '__' + Math.round(Math.random() * 1e7);\n\n          try {\n            localStorage.setItem(key, key);\n            localStorage.removeItem(key);\n          } catch (err) {\n            supported = false;\n          }\n        }\n\n        return supported;\n      }\n    }\n  }\n\n  function RouterProvider($mockStorageProvider) {\n    var provider = void 0,\n        namespace = '',\n        logLevel = 0,\n        availablesLogLevels = { error: 0, warn: 1, info: 2, debug: 3 },\n        resources = [];\n\n    RouterService.$inject = ['$log', '$q', '$mockStorage'];\n\n    provider = {\n      setNamespace: setNamespace,\n      setLogLevel: setLogLevel,\n      addResource: addResource,\n      $get: RouterService\n    };\n\n    return provider;\n\n    function setNamespace(n) {\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setNamespace expects a string.');\n      }\n      namespace = n;\n    }\n\n    function setLogLevel(l) {\n      if (typeof l !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setLogLevel expects a string (error|warning|info).');\n      }\n      if (Object.keys(availablesLogLevels).indexOf(l) > -1) {\n        logLevel = availablesLogLevels[l];\n      }\n    }\n\n    function addResource(n, o) {\n      var options = void 0,\n          resource = void 0;\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) !== 'object') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      options = Object.assign({\n        primaryKey: 'id',\n        collection: true,\n        parent: null,\n        key: _getKey(n)\n      }, o || {});\n\n      resource = _getResource(n, options.parent);\n\n      if (resource) {\n        throw new TypeError('[ngMockRouter] - Provider.addResource: Resource ' + n + ' already exist.');\n      } else {\n        var newResource = {\n          name: n\n        };\n\n        newResource.primaryKey = options.primaryKey;\n        newResource.key = options.key;\n        newResource.collection = options.collection;\n        newResource.data = options.collection ? [] : {};\n\n        if (options.parent) {\n          var parent = _getResource(options.parent);\n          if (parent) {\n            if (newResource.collection && parent.keys.indexOf(newResource.key) > -1) {\n              throw new TypeError('[ngMockRouter] - Provider.addResource: key ' + newResource.key + ' already exist. You can specify another one with the option key');\n            }\n            newResource.parent = options.parent;\n          }\n        }\n        newResource.path = _getPath(newResource);\n        newResource.id = _getId(newResource);\n        newResource.keys = _getKeys(newResource);\n\n        $mockStorageProvider.setItem(newResource.id, newResource.data);\n\n        resources.push(newResource);\n      }\n    }\n\n    function _getResource(n, p) {\n      return resources.find(function (r) {\n        if (p) {\n          return r.name === n && r.parent === p;\n        } else {\n          return r.name === n;\n        }\n      });\n    }\n\n    function _getKey(n) {\n      return 'id' + n.charAt(0).toUpperCase() + n.substr(1).toLowerCase();\n    }\n\n    function _getPath(r) {\n      var path = '';\n      if (r.parent) {\n        path += _getResource(r.parent).path + '/';\n      }\n      path += r.name + (r.collection ? '/:' + r.key : '');\n\n      return path;\n    }\n\n    function _getId(r) {\n      var id = '';\n      if (r.parent) {\n        id += _getResource(r.parent).id + '_';\n      }\n      id += r.name;\n\n      return id;\n    }\n\n    function _getKeys(r) {\n      var keys = [];\n      if (r.parent && r.collection) {\n        keys = [].concat(_toConsumableArray(_getResource(r.parent).keys), [r.key]);\n      } else if (r.parent) {\n        keys = _getResource(r.parent).keys;\n      } else if (r.collection) {\n        keys = [r.key];\n      }\n      return keys;\n    }\n\n    function RouterService($log, $q, $mockStorage) {\n      var service = {\n        get: get,\n        post: post,\n        put: put,\n        remove: remove,\n        patch: patch,\n        getResource: getResource\n      };\n      return service;\n\n      function get(url, options) {\n        _log('info', 'GET : ', url);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        var rData = void 0;\n        var d = $q.defer();\n\n        var _getResource2 = getResource(url);\n\n        var _getResource3 = _slicedToArray(_getResource2, 2);\n\n        var r = _getResource3[0];\n        var p = _getResource3[1];\n\n        if (r) {\n          (function () {\n            var resourceId = p[r.key];\n            rData = $mockStorage.getItem(r.id);\n            if (resourceId) {\n              var result = rData.find(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (result) {\n                _log('info', 'Response : ', 200, result);\n                d.resolve({\n                  status: 200,\n                  data: result\n                });\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else {\n              _log('info', 'Response : ', 200, rData);\n              d.resolve({\n                status: 200,\n                data: rData\n              });\n            }\n          })();\n        } else {\n          _log('info', 'Response : ', 404, { error: 'Not a valid path!' });\n          d.reject({\n            status: 404,\n            data: { error: 'Not a valid path!' }\n          });\n        }\n        return d.promise;\n      }\n\n      function post(url, data, options) {\n        _log('info', 'POST : ', url);\n        _log('info', 'Data : ', data);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        var rData = void 0;\n        var d = $q.defer();\n        var id = Math.random().toString(36).substring(2);\n\n        var _getResource4 = getResource(url);\n\n        var _getResource5 = _slicedToArray(_getResource4, 2);\n\n        var r = _getResource5[0];\n        var p = _getResource5[1];\n\n        if (r) {\n          rData = $mockStorage.getItem(r.id);\n          if (Array.isArray(rData)) {\n            data[r.primaryKey] = id;\n            rData.push(data);\n            $mockStorage.setItem(r.id, rData);\n            _log('info', 'Response : ', 200, data);\n            d.resolve({\n              status: 200,\n              data: data\n            });\n          } else {\n            _log('info', 'Response : ', 405, { error: 'Method Not Allowed' });\n            d.reject({\n              status: 405,\n              data: { error: 'Method Not Allowed' }\n            });\n          }\n        } else {\n          _log('info', 'Response : ', 404, { error: 'Not a valid path!' });\n          d.reject({\n            status: 404,\n            data: { error: 'Not a valid path!' }\n          });\n        }\n        return d.promise;\n      }\n\n      function put(url, data, options) {\n        _log('info', 'PUT : ', url);\n        _log('info', 'Data : ', data);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        var rData = void 0;\n        var d = $q.defer();\n\n        var _getResource6 = getResource(url);\n\n        var _getResource7 = _slicedToArray(_getResource6, 2);\n\n        var r = _getResource7[0];\n        var p = _getResource7[1];\n\n        if (r) {\n          (function () {\n            var resourceId = p[r.key];\n            rData = $mockStorage.getItem(r.id);\n            if (resourceId) {\n              var rIndex = rData.findIndex(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (rIndex > -1) {\n                rData[rIndex] = data;\n                $mockStorage.setItem(r.id, rData);\n                _log('info', 'Response : ', 200, rData[rIndex]);\n                d.resolve({\n                  status: 200,\n                  data: rData[rIndex]\n                });\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else {\n              _log('info', 'Response : ', 404, { error: 'No Id Given' });\n              d.reject({\n                status: 404,\n                data: { error: 'No Id Given' }\n              });\n            }\n          })();\n        } else {\n          _log('info', 'Response : ', 404, { error: 'Not a valid path!' });\n          d.reject({\n            status: 404,\n            data: { error: 'Not a valid path!' }\n          });\n        }\n        return d.promise;\n      }\n\n      function remove(url, options) {\n        _log('info', 'DELETE : ', url);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        var rData = void 0;\n        var d = $q.defer();\n\n        var _getResource8 = getResource(url);\n\n        var _getResource9 = _slicedToArray(_getResource8, 2);\n\n        var r = _getResource9[0];\n        var p = _getResource9[1];\n\n        if (r) {\n          (function () {\n            var resourceId = p[r.key];\n            rData = $mockStorage.getItem(r.id);\n            if (resourceId) {\n              var rIndex = rData.findIndex(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (rIndex > -1) {\n                rData.splice(rIndex, 1);\n                $mockStorage.setItem(r.id, rData);\n                _log('info', 'Response : ', 200, rData);\n                d.resolve({\n                  status: 200,\n                  data: rData\n                });\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else {\n              _log('info', 'Response : ', 404, { error: 'No Id Given' });\n              d.reject({\n                status: 404,\n                data: { error: 'No Id Given' }\n              });\n            }\n          })();\n        } else {\n          _log('info', 'Response : ', 404, { error: 'Not a valid path!' });\n          d.reject({\n            status: 404,\n            data: { error: 'Not a valid path!' }\n          });\n        }\n        return d.promise;\n      }\n\n      function patch(url, data, options) {\n        _log('info', 'PATCH : ', url);\n        _log('info', 'Data : ', data);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        var rData = void 0;\n        var d = $q.defer();\n\n        var _getResource10 = getResource(url);\n\n        var _getResource11 = _slicedToArray(_getResource10, 2);\n\n        var r = _getResource11[0];\n        var p = _getResource11[1];\n\n        if (r) {\n          (function () {\n            var resourceId = p[r.key];\n            rData = $mockStorage.getItem(r.id);\n            if (resourceId) {\n              var rIndex = rData.findIndex(function (item) {\n                return String(item[r.primaryKey]) === String(resourceId);\n              });\n              if (rIndex > -1) {\n                Object.assign(rData[rIndex], data);\n                $mockStorage.setItem(r.id, rData);\n                _log('info', 'Response : ', 200, rData[rIndex]);\n                d.resolve({\n                  status: 200,\n                  data: rData[rIndex]\n                });\n              } else {\n                _log('info', 'Response : ', 404, { error: 'Not Found' });\n                d.reject({\n                  status: 404,\n                  data: { error: 'Not Found' }\n                });\n              }\n            } else {\n              _log('info', 'Response : ', 404, { error: 'No Id Given' });\n              d.reject({\n                status: 404,\n                data: { error: 'No Id Given' }\n              });\n            }\n          })();\n        } else {\n          _log('info', 'Response : ', 404, { error: 'Not a valid path!' });\n          d.reject({\n            status: 404,\n            data: { error: 'Not a valid path!' }\n          });\n        }\n        return d.promise;\n      }\n\n      function getResource(path) {\n        path = ('/' + path + '/').replace(/\\/\\//g, '/');\n        var r = resources.find(function (r) {\n          return _getRegex(r.path).test(path);\n        });\n        if (r) {\n          return [r, _getParams(path, r)];\n        } else {\n          return [null, null];\n        }\n      }\n\n      function _getRegex(path) {\n        path = '/' + namespace + '/' + path + '/';\n        return new RegExp('^' + path.replace(/\\/\\//g, '/').replace(/\\//g, '\\\\/').replace(/\\:[\\w]*/g, '(?:([^\\\\/]*))') + '?$');\n      }\n\n      function _getParams(path, r) {\n        var i = void 0,\n            params = {},\n            m = path.match(_getRegex(r.path));\n\n        for (i = 1; i < m.length; i++) {\n          var key = r.keys[i - 1],\n              val = _decodeParam(m[i]);\n\n          if (val !== undefined || !hasOwnProperty.call(params, key)) {\n            params[key] = val;\n          }\n        }\n        return params;\n      }\n\n      function _decodeParam(val) {\n        if (typeof val !== 'string' || val.length === 0) {\n          return val;\n        }\n\n        try {\n          return decodeURIComponent(val);\n        } catch (err) {\n          if (err instanceof URIError) {\n            err.message = 'Failed to decode param \\'' + val + '\\'';\n            err.status = err.statusCode = 400;\n          }\n          throw err;\n        }\n      }\n\n      function _log(l) {\n        if (Object.keys(availablesLogLevels).indexOf(l) > -1 && logLevel >= availablesLogLevels[l]) {\n          for (var _len = arguments.length, msg = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            msg[_key - 1] = arguments[_key];\n          }\n\n          $log[l].apply($log, msg);\n        }\n      }\n    }\n  }\n\n  function ModuleConfig($provide) {\n    httpDecorator.$inject = ['$delegate', '$mockRouter'];\n    $provide.decorator('$http', httpDecorator);\n\n    function httpDecorator($delegate, $mockRouter) {\n      var wrapper = function wrapper() {\n        return $delegate.apply($delegate, arguments);\n      };\n      // [\"pendingRequests\", \"get\", \"delete\", \"head\", \"jsonp\", \"post\", \"put\", \"patch\", \"defaults\"]\n      // [\"get\", \"delete\", \"head\", \"jsonp\", \"post\", \"put\", \"patch\"]\n      Object.keys($delegate).filter(function (k) {\n        return typeof $delegate[k] === 'function';\n      }).forEach(function (k) {\n        wrapper[k] = function () {\n          return $delegate[k].apply($delegate, arguments);\n        };\n      });\n      wrapper['get'] = function () {\n        return $mockRouter.get.apply($mockRouter, arguments);\n      };\n      wrapper['post'] = function () {\n        return $mockRouter.post.apply($mockRouter, arguments);\n      };\n      wrapper['put'] = function () {\n        return $mockRouter.put.apply($mockRouter, arguments);\n      };\n      wrapper['patch'] = function () {\n        return $mockRouter.patch.apply($mockRouter, arguments);\n      };\n      wrapper['delete'] = function () {\n        return $mockRouter.remove.apply($mockRouter, arguments);\n      };\n      return wrapper;\n    }\n  }\n})(window, window.angular);\n\n},{}]},{},[1])\n\n","(function(window, angular, undefined) {\n  'use strict';\n\n  StorageProvider.$inject = ['$windowProvider'];\n  RouterProvider.$inject  = ['$mockStorageProvider'];\n\n  /**\n   * @ngdoc overview\n   * @name ngMockStorage\n   */\n\n  return angular.module('ngMockStorage', [])\n\n    /**\n     * @ngdoc object\n     * @name ngMockStorage.$mockStorage\n     * @requires $window\n     * @requires $log\n     */\n\n    .provider('$mockStorage', StorageProvider)\n\n    /**\n     * @ngdoc object\n     * @name ngMockStorage.$mockRouter\n     * @requires $log\n     * @requires $q\n     */\n\n    .provider('$mockRouter', RouterProvider)\n\n    .config(['$provide', ModuleConfig]);\n\n\n  function StorageProvider($windowProvider) {\n    let provider,\n        $window          = $windowProvider.$get(),\n        storageKeyPrefix = 'ngMockStorage-',\n        storageType      = 'localStorage',\n        serializer       = angular.toJson,\n        deserializer     = angular.fromJson;\n\n    StorageService.$inject = ['$window', '$log'];\n\n    provider = {\n      setStorageType  : setStorageType,\n      setKeyPrefix    : setKeyPrefix,\n      setSerializer   : setSerializer,\n      setDeserializer : setDeserializer,\n      setItem         : setItem,\n      clear           : clear,\n      $get            : StorageService\n    };\n\n    return provider;\n\n    function setStorageType(type) {\n      if (typeof type !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setStorageType() expects a String.');\n      }\n      storageType = type;\n    }\n\n    function setKeyPrefix(prefix) {\n      if (typeof prefix !== 'string') {\n        throw new TypeError('[ngMockStorage] - Provider.setKeyPrefix() expects a String.');\n      }\n      storageKeyPrefix = prefix;\n    }\n\n    function setSerializer(s) {\n      if (typeof s !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setSerializer expects a function.');\n      }\n      serializer = s;\n    }\n\n    function setDeserializer(d) {\n      if (typeof d !== 'function') {\n        throw new TypeError('[ngMockStorage] - Provider.setDeserializer expects a function.');\n      }\n      deserializer = d;\n    }\n\n    function getItem(key) {\n      return deserializer($window[storageType].getItem(storageKeyPrefix + key));\n    }\n\n    function setItem(key, value) {\n      return $window[storageType].setItem(storageKeyPrefix + key, serializer(value));\n    }\n\n    function removeItem(key) {\n      return $window[storageType].setItem(storageKeyPrefix + key);\n    }\n\n    function clear() {\n      return $window[storageType].clear();\n    }\n\n    function StorageService($window, $log) {\n      let service;\n\n      if (isStorageSupported(storageType)) {\n        service = {\n          getItem    : getItem,\n          setItem    : setItem,\n          removeItem : removeItem,\n          clear      : clear\n        };\n      } else {\n        $log.warn('This browser does not support Web Storage!');\n        service = {\n          setItem    : angular.noop,\n          getItem    : angular.noop,\n          removeItem : angular.noop,\n          clear      : angular.noop\n        };\n      }\n\n      return service;\n\n      function isStorageSupported() {\n\n        // Some installations of IE, for an unknown reason, throw \"SCRIPT5: Error: Access is denied\"\n        // when accessing window.localStorage. This happens before you try to do anything with it. Catch\n        // that error and allow execution to continue.\n\n        // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari\n        // when \"Block cookies\": \"Always block\" is turned on\n        let supported, key;\n        try {\n          supported = $window[storageType];\n        }\n        catch (err) {\n          supported = false;\n        }\n\n        // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n        // is available, but trying to call .setItem throws an exception below:\n        // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota.\"\n        if (supported && storageType === 'localStorage') {\n          key = '__' + Math.round(Math.random() * 1e7);\n\n          try {\n            localStorage.setItem(key, key);\n            localStorage.removeItem(key);\n          }\n          catch (err) {\n            supported = false;\n          }\n        }\n\n        return supported;\n      }\n    }\n  }\n\n  function RouterProvider($mockStorageProvider) {\n    let provider,\n        namespace           = '',\n        logLevel            = 0,\n        availablesLogLevels = {error : 0, warn : 1, info : 2, debug : 3},\n        resources           = [];\n\n    RouterService.$inject = ['$log', '$q', '$mockStorage'];\n\n    provider = {\n      setNamespace : setNamespace,\n      setLogLevel  : setLogLevel,\n      addResource  : addResource,\n      $get         : RouterService\n    };\n\n    return provider;\n\n    function setNamespace(n) {\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setNamespace expects a string.');\n      }\n      namespace = n;\n    }\n\n    function setLogLevel(l) {\n      if (typeof l !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.setLogLevel expects a string (error|warning|info).');\n      }\n      if (Object.keys(availablesLogLevels).indexOf(l) > -1) {\n        logLevel = availablesLogLevels[l];\n      }\n    }\n\n    function addResource(n, o) {\n      let options, resource;\n      if (typeof n !== 'string') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      if (o && typeof o !== 'object') {\n        throw new TypeError('[ngMockRouter] - Provider.addResource expects string, [object].');\n      }\n\n      options = Object.assign({\n        primaryKey : 'id',\n        collection : true,\n        parent     : null,\n        key        : _getKey(n)\n      }, o || {});\n\n      resource = _getResource(n, options.parent);\n\n      if (resource) {\n        throw new TypeError('[ngMockRouter] - Provider.addResource: Resource ' + n + ' already exist.');\n      } else {\n        let newResource = {\n          name : n\n        };\n\n        newResource.primaryKey = options.primaryKey;\n        newResource.key        = options.key;\n        newResource.collection = options.collection;\n        newResource.data       = options.collection ? [] : {};\n\n        if (options.parent) {\n          let parent = _getResource(options.parent);\n          if (parent) {\n            if (newResource.collection && parent.keys.indexOf(newResource.key) > -1) {\n              throw new TypeError('[ngMockRouter] - Provider.addResource: key ' + newResource.key + ' already exist. You can specify another one with the option key');\n            }\n            newResource.parent = options.parent;\n          }\n        }\n        newResource.path = _getPath(newResource);\n        newResource.id   = _getId(newResource);\n        newResource.keys = _getKeys(newResource);\n\n        $mockStorageProvider.setItem(newResource.id, newResource.data);\n\n        resources.push(newResource);\n      }\n    }\n\n    function _getResource(n, p) {\n      return resources.find((r)=> {\n        if (p) {\n          return (r.name === n && r.parent === p);\n        } else {\n          return r.name === n;\n        }\n      });\n    }\n\n    function _getKey(n) {\n      return 'id' + n.charAt(0).toUpperCase() + n.substr(1).toLowerCase();\n    }\n\n    function _getPath(r) {\n      let path = '';\n      if (r.parent) {\n        path += _getResource(r.parent).path + '/';\n      }\n      path += r.name + (r.collection ? '/:' + r.key : '');\n\n      return path;\n    }\n\n    function _getId(r) {\n      let id = '';\n      if (r.parent) {\n        id += _getResource(r.parent).id + '_';\n      }\n      id += r.name;\n\n      return id;\n    }\n\n    function _getKeys(r) {\n      let keys = [];\n      if (r.parent && r.collection) {\n        keys = [..._getResource(r.parent).keys, r.key];\n      } else if (r.parent) {\n        keys = _getResource(r.parent).keys;\n      } else if (r.collection) {\n        keys = [r.key];\n      }\n      return keys;\n    }\n\n    function RouterService($log, $q, $mockStorage) {\n      let service = {\n        get         : get,\n        post        : post,\n        put         : put,\n        remove      : remove,\n        patch       : patch,\n        getResource : getResource\n      };\n      return service;\n\n      function get(url, options) {\n        _log('info', 'GET : ', url);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        let rData,\n            d = $q.defer(),\n            [r, p] = getResource(url);\n\n        if (r) {\n          let resourceId = p[r.key];\n          rData          = $mockStorage.getItem(r.id);\n          if (resourceId) {\n            let result = rData.find((item) => String(item[r.primaryKey]) === String(resourceId));\n            if (result) {\n              _log('info', 'Response : ', 200, result);\n              d.resolve({\n                status : 200,\n                data   : result\n              });\n            } else {\n              _log('info', 'Response : ', 404, {error : 'Not Found'});\n              d.reject({\n                status : 404,\n                data   : {error : 'Not Found'}\n              });\n            }\n          } else {\n            _log('info', 'Response : ', 200, rData);\n            d.resolve({\n              status : 200,\n              data   : rData\n            });\n          }\n        } else {\n          _log('info', 'Response : ', 404, {error : 'Not a valid path!'});\n          d.reject({\n            status : 404,\n            data   : {error : 'Not a valid path!'}\n          });\n        }\n        return d.promise;\n      }\n\n      function post(url, data, options) {\n        _log('info', 'POST : ', url);\n        _log('info', 'Data : ', data);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        let rData,\n            d  = $q.defer(),\n            id = Math.random().toString(36).substring(2),\n            [r, p] = getResource(url);\n\n        if (r) {\n          rData = $mockStorage.getItem(r.id);\n          if (Array.isArray(rData)) {\n            data[r.primaryKey] = id;\n            rData.push(data);\n            $mockStorage.setItem(r.id, rData);\n            _log('info', 'Response : ', 200, data);\n            d.resolve({\n              status : 200,\n              data   : data\n            });\n          } else {\n            _log('info', 'Response : ', 405, {error : 'Method Not Allowed'});\n            d.reject({\n              status : 405,\n              data   : {error : 'Method Not Allowed'}\n            });\n          }\n        } else {\n          _log('info', 'Response : ', 404, {error : 'Not a valid path!'});\n          d.reject({\n            status : 404,\n            data   : {error : 'Not a valid path!'}\n          });\n        }\n        return d.promise;\n\n      }\n\n      function put(url, data, options) {\n        _log('info', 'PUT : ', url);\n        _log('info', 'Data : ', data);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        let rData,\n            d = $q.defer(),\n            [r, p] = getResource(url);\n\n        if (r) {\n          let resourceId = p[r.key];\n          rData          = $mockStorage.getItem(r.id);\n          if (resourceId) {\n            let rIndex = rData.findIndex((item) => String(item[r.primaryKey]) === String(resourceId));\n            if (rIndex > -1) {\n              rData[rIndex] = data;\n              $mockStorage.setItem(r.id, rData);\n              _log('info', 'Response : ', 200, rData[rIndex]);\n              d.resolve({\n                status : 200,\n                data   : rData[rIndex]\n              });\n            } else {\n              _log('info', 'Response : ', 404, {error : 'Not Found'});\n              d.reject({\n                status : 404,\n                data   : {error : 'Not Found'}\n              });\n            }\n          } else {\n            _log('info', 'Response : ', 404, {error : 'No Id Given'});\n            d.reject({\n              status : 404,\n              data   : {error : 'No Id Given'}\n            });\n          }\n        } else {\n          _log('info', 'Response : ', 404, {error : 'Not a valid path!'});\n          d.reject({\n            status : 404,\n            data   : {error : 'Not a valid path!'}\n          });\n        }\n        return d.promise;\n      }\n\n      function remove(url, options) {\n        _log('info', 'DELETE : ', url);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        let rData,\n            d = $q.defer(),\n            [r, p] = getResource(url);\n\n        if (r) {\n          let resourceId = p[r.key];\n          rData          = $mockStorage.getItem(r.id);\n          if (resourceId) {\n            let rIndex = rData.findIndex((item) => String(item[r.primaryKey]) === String(resourceId));\n            if (rIndex > -1) {\n              rData.splice(rIndex, 1);\n              $mockStorage.setItem(r.id, rData);\n              _log('info', 'Response : ', 200, rData);\n              d.resolve({\n                status : 200,\n                data   : rData\n              });\n            } else {\n              _log('info', 'Response : ', 404, {error : 'Not Found'});\n              d.reject({\n                status : 404,\n                data   : {error : 'Not Found'}\n              });\n            }\n          } else {\n            _log('info', 'Response : ', 404, {error : 'No Id Given'});\n            d.reject({\n              status : 404,\n              data   : {error : 'No Id Given'}\n            });\n          }\n        } else {\n          _log('info', 'Response : ', 404, {error : 'Not a valid path!'});\n          d.reject({\n            status : 404,\n            data   : {error : 'Not a valid path!'}\n          });\n        }\n        return d.promise;\n      }\n\n      function patch(url, data, options) {\n        _log('info', 'PATCH : ', url);\n        _log('info', 'Data : ', data);\n        if (options) {\n          _log('info', 'Options : ', options);\n        }\n        let rData,\n            d = $q.defer(),\n            [r, p] = getResource(url);\n\n        if (r) {\n          let resourceId = p[r.key];\n          rData          = $mockStorage.getItem(r.id);\n          if (resourceId) {\n            let rIndex = rData.findIndex((item) => String(item[r.primaryKey]) === String(resourceId));\n            if (rIndex > -1) {\n              Object.assign(rData[rIndex], data);\n              $mockStorage.setItem(r.id, rData);\n              _log('info', 'Response : ', 200, rData[rIndex]);\n              d.resolve({\n                status : 200,\n                data   : rData[rIndex]\n              });\n            } else {\n              _log('info', 'Response : ', 404, {error : 'Not Found'});\n              d.reject({\n                status : 404,\n                data   : {error : 'Not Found'}\n              });\n            }\n          } else {\n            _log('info', 'Response : ', 404, {error : 'No Id Given'});\n            d.reject({\n              status : 404,\n              data   : {error : 'No Id Given'}\n            });\n          }\n        } else {\n          _log('info', 'Response : ', 404, {error : 'Not a valid path!'});\n          d.reject({\n            status : 404,\n            data   : {error : 'Not a valid path!'}\n          });\n        }\n        return d.promise;\n      }\n\n      function getResource(path) {\n        path  = ('/' + path + '/').replace(/\\/\\//g, '/');\n        let r = resources.find((r) => {\n          return _getRegex(r.path).test(path);\n        });\n        if (r) {\n          return [r, _getParams(path, r)];\n        } else {\n          return [null, null];\n        }\n      }\n\n      function _getRegex(path) {\n        path = '/' + namespace + '/' + path + '/';\n        return new RegExp('^' +\n          path.replace(/\\/\\//g, '/')\n            .replace(/\\//g, '\\\\/')\n            .replace(/\\:[\\w]*/g, '(?:([^\\\\/]*))') +\n          '?$');\n      }\n\n      function _getParams(path, r) {\n        let i,\n            params = {},\n            m      = path.match(_getRegex(r.path));\n\n        for (i = 1; i < m.length; i++) {\n          let key = r.keys[i - 1],\n              val = _decodeParam(m[i]);\n\n          if (val !== undefined || !(hasOwnProperty.call(params, key))) {\n            params[key] = val;\n          }\n        }\n        return params;\n      }\n\n      function _decodeParam(val) {\n        if (typeof val !== 'string' || val.length === 0) {\n          return val;\n        }\n\n        try {\n          return decodeURIComponent(val);\n        } catch (err) {\n          if (err instanceof URIError) {\n            err.message = 'Failed to decode param \\'' + val + '\\'';\n            err.status  = err.statusCode = 400;\n          }\n          throw err;\n        }\n      }\n\n      function _log(l, ...msg) {\n        if (Object.keys(availablesLogLevels).indexOf(l) > -1 && logLevel >= availablesLogLevels[l]) {\n          $log[l](...msg);\n        }\n      }\n    }\n  }\n\n  function ModuleConfig($provide) {\n    httpDecorator.$inject = ['$delegate', '$mockRouter'];\n    $provide.decorator('$http', httpDecorator);\n\n    function httpDecorator($delegate, $mockRouter) {\n      let wrapper = function() {\n        return $delegate.apply($delegate, arguments);\n      };\n      // [\"pendingRequests\", \"get\", \"delete\", \"head\", \"jsonp\", \"post\", \"put\", \"patch\", \"defaults\"]\n      // [\"get\", \"delete\", \"head\", \"jsonp\", \"post\", \"put\", \"patch\"]\n      Object.keys($delegate).filter((k)=> typeof $delegate[k] === 'function')\n        .forEach((k)=> {\n          wrapper[k] = function() {\n            return $delegate[k].apply($delegate, arguments);\n          };\n        });\n      wrapper['get']    = function() {\n        return $mockRouter.get(...arguments);\n      };\n      wrapper['post']   = function() {\n        return $mockRouter.post(...arguments);\n      };\n      wrapper['put']    = function() {\n        return $mockRouter.put(...arguments);\n      };\n      wrapper['patch']  = function() {\n        return $mockRouter.patch(...arguments);\n      };\n      wrapper['delete'] = function() {\n        return $mockRouter.remove(...arguments);\n      };\n      return wrapper;\n    }\n  }\n})(window, window.angular);\n"],"sourceRoot":"/source/"}